@model ProductOverviewModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration

@* ABC: custom *@
@using Microsoft.AspNetCore.Mvc.ViewComponents
@using Nop.Plugin.Misc.AbcCore.Domain
@using Nop.Plugin.Misc.AbcCore.Extensions
@using Nop.Plugin.Misc.AbcCore.Infrastructure
@using Nop.Plugin.Misc.AbcCore.Services
@using Nop.Services.Catalog
@using Nop.Services.Common
@using Nop.Web.Extensions
@using Nop.Web.Framework.Infrastructure
@using Nop.Web.Models.Catalog
@using Nop.Plugin.Misc.AbcCore.Nop

@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject ISettingService settingService
@inject CatalogSettings catalogSettings
@inject IViewComponentSelector viewComponentSelector

@* ABC: custom *@
@inject FrontEndService frontEndService
@inject IGenericAttributeService genericAttributeService
@inject IAbcProductAttributeService abcProductAttributeService
@inject IProductService productService
@inject IStoreContext storeContext
@inject IAbcCategoryService abcCategoryService

@{

    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/SevenSpikes.Core/Scripts/slick-slider-1.6.0.min.js");
    Html.AddCssFileParts("~/Plugins/SevenSpikes.Core/Styles/slick-slider-1.6.0.css");
}

@{
    var hasDeliveryOptions = await abcProductAttributeService.ProductHasDeliveryOptionsAsync(Model.Id);
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new
        {
            productId = Model.Id,
            shoppingCartTypeId =
        shoppingCartTypeId,
            quantity = quantity,
            forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart
        });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new
        {
            productId = Model.Id,
            shoppingCartTypeId =
        shoppingCartTypeId,
            quantity = quantity
        });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new
    {
        productId = Model.Id,
        shoppingCartTypeId =
    (int)ShoppingCartType.Wishlist,
        quantity = quantity
    });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    // ABC: custom code
    var itemNumber = "";
    var itemNumberDisplay = "";
    ProductFlag productFlag = frontEndService.GetProductFlag(Model.Id);

    bool isHawthorne = frontEndService.StoreIsHawthorne(await storeContext.GetCurrentStoreAsync());
    string equalPaymentsModalStoreName = isHawthorne ? "Hawthorne" : "ABC Warehouse";

    if (frontEndService.ProductIsAbc(Model.Id))
    {
        var pad = frontEndService.GetProductAbcDescriptionByProductId(Model.Id);

        if (pad != null)
        {
            itemNumber = pad.AbcItemNumber;
            itemNumberDisplay = itemNumber + (productFlag != null && productFlag.IsSpecialOrder() ? "+" : "");
        }
    }

    var product = await productService.GetProductByIdAsync(Model.Id);

    var priceStr = Model.ProductPrice.Price?.Replace(".00", "");

    // custom: if product is mattress, use "Build Package"
    var isMattress = false;
    var pams = await abcProductAttributeService.GetProductAttributeMappingsByProductIdAsync(Model.Id);

    foreach (var pam in pams)
    {
        var pa = await abcProductAttributeService.GetProductAttributeByIdAsync(pam.ProductAttributeId);
        if (pa.Name == "Mattress Size")
        {
            isMattress = true;
            break;
        }
    }

    var mattressSize = "";
    var productUrl = @Url.RouteUrl("Product", new { SeName = Model.SeName });
    if (isMattress)
    {
        // custom: add URL query params for mattress if applicable:
        var path = @Context.Request.Path.Value;
        if (path == "/getFilteredProducts")
        {
            path = @Context.Request.Headers["Referer"];
            path = path.Substring(path.LastIndexOf("/"));
        }
        switch (path)
        {
            case "/twin-mattress":
                mattressSize = "twin-mattress";
                break;
            case "/twin-extra-long-mattress":
                mattressSize = "twinxl-mattress";
                break;
            case "/full-mattress":
                mattressSize = "full-mattress";
                break;
            case "/queen-mattress":
                mattressSize = "queen-mattress";
                break;
            case "/king-mattress":
                mattressSize = "king-mattress";
                break;
            case "/california-king-mattress":
                mattressSize = "california-king-mattress";
                break;
        }
    }

    if (!string.IsNullOrWhiteSpace(mattressSize))
    {
        productUrl = $"{productUrl}?size={mattressSize}";
    }

    //**************************************************************************
    bool usesCartPricing = await product.IsAddToCartAsync() || await product.IsAddToCartWithUserInfoAsync();
    var miniDesc = "";

    bool usesPairPricing = false;
    var plpDescription = await genericAttributeService.GetAttributeAsync<string>(
    product, "PLPDescription");
    if (!string.IsNullOrWhiteSpace(plpDescription))
    {
        miniDesc = plpDescription;
    }
    else if (frontEndService.ProductIsAbc(Model.Id))
    {
        var pad = frontEndService.GetProductAbcDescriptionByProductId(Model.Id);

        if (pad != null)
        {
            usesPairPricing = pad.UsesPairPricing;
            miniDesc = pad.AbcDescription;
        }
    }
    else
    {
        miniDesc = Model.ShortDescription;
    }

    //**************************************************************************

    var index = Model.Name.LastIndexOf(' ');
    string man = "";
    string manNo = "";
    //Name does not conform to standard of [manufacturer] [sku]
    if (index < 0)
    {
        manNo = Model.Name;
    }
    else
    {
        man = Model.Name.Substring(0, index);
        manNo = Model.Name.Substring(index);
    }

    var isClearance = false;
    var productCategories = await abcCategoryService.GetProductCategoriesByProductIdAsync(Model.Id);
    foreach (var productCategory in productCategories)
    {
        isClearance = await abcCategoryService.IsCategoryIdClearance(productCategory.CategoryId);
        if (isClearance)
        {
            break;
        }
    }

    bool isOpenBox = productFlag != null &&
                     !isClearance ? productFlag.IsOpenBox() : false;
    decimal openBoxPrice = 0.0M;
    if (isOpenBox)
    {
        openBoxPrice = productFlag.CalculateOpenBoxPrice(Model.ProductPrice.PriceValue);
    }

    @* ABC: both style and script should be moved *@
    <style>
        .picture.picture {
            margin: 5px;
        }

        .product-box-description {
            padding-right: 5px;
            word-wrap: break-word;
            font-weight: 600;
            color: #4F4F4F;
            line-height: 2.5ex;
            height: 7.5ex;
            overflow: hidden;
        }

        .product-box-description * {
            display: none;
        }

        .item-number-style {
            font-size: 11px;
            padding: 0 5px 0 0;
        }

        .no-cart-image::before {
            display: none;
        }

        .no-cart-image.no-cart-image.no-cart-image {
            padding: 0px;
        }

        .no-cart-image::after {
            display: none;
        }

        .item-box .buttons-lower button span {
            color: #fff;
        }

        /* Removes Product Sources from Item Desc. - since I can't seem to find how to programmatically remove. */
        .product-sources {
            display: none;
        }
    </style>
    <script>
        function isEmail(email) {
            var regex = /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
            return regex.test(email);
        }

        $(function () {
            $('#product-box-add-to-cart-button-@Model.Id').on('click', function () {
                AjaxCart.addproducttocart_catalog('@addtocartlink');
                return false;
            });
        });


    </script>

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;

    var imagesInCarousel = false;
    IList<string> images = new List<string>();

    if (Model.CustomProperties.ContainsKey("ProductCarouselImages"))
    {
        images = Model.CustomProperties["ProductCarouselImages"] as IList<string>;

        imagesInCarousel = await settingService.GetSettingByKeyAsync("voyagethemesettings.productboxesimagescarouselenabled",
        false, storeId, true) &&
        images.Count > 1;
    }

    var slickSettingsDictionary = new Dictionary<string, object>()
{
{ "adaptiveWidth", true},
{ "adaptiveHeight", true},
{ "zIndex", 0},
{ "autoplay", false},
{ "infinite", true},
{ "dots", false },
{ "arrows", true},
{ "appendArrows", ".product-item-" + Model.Id +" .navigation"},
{ "slide", ".product-box-image-slide" }, // explicitly define slides to prevent the arrow container from sliding
{ "slidesToShow", 1},
{ "slidesToScroll", 1},
{ "lazyLoad", "ondemand"},
{ "centerPadding", "0px"},
{ "centerMode", true }
};

    var slickSettingsJson = JsonConvert.SerializeObject(slickSettingsDictionary);
}

<div class="product-item product-item-@Model.Id voyage" data-productid="@Model.Id">
    <div class="picture">
        <div class="image-container">
            <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
                @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null || Model.DefaultPictureModel.HoverImageUrl != "" || Model.DefaultPictureModel.HoverImageUrl != null)
                {
                    @await Component.InvokeAsync("LazyLoadImage", new(string Key, string Value)[] 
                    {
                        ("src", Model.DefaultPictureModel.ImageUrl),
                        ("alt", Model.DefaultPictureModel.AlternateText),
                        ("title", Model.DefaultPictureModel.Title)
                    });

                    if(Model.DefaultPictureModel.HoverImageUrl == "" || Model.DefaultPictureModel.HoverImageUrl == null)
                        {
                            <img alt="Default Image" src="https://www.abcwarehouse.com/images/thumbs/default-image_550.png" title="Default Image" id="default-img"/>
                        }
                }
                else
                {
                    <img alt="Default Image" src="https://www.abcwarehouse.com/images/thumbs/default-image_550.png" title="Default Image" id="default-img"/>
                }
                <div class="hover-image">
                    @if (viewComponentSelector.SelectComponent("LazyLoadImage") != null || Model.DefaultPictureModel.HoverImageUrl != "" || Model.DefaultPictureModel.HoverImageUrl != null)
                    {
                        @await Component.InvokeAsync("LazyLoadImage", new(string Key, string Value)[] 
                        {
                            ("src", Model.DefaultPictureModel.HoverImageUrl),
                            ("alt", Model.DefaultPictureModel.HoverAlternateText),
                            ("title", Model.DefaultPictureModel.HoverTitle),
                        });

                        if(Model.DefaultPictureModel.HoverImageUrl == "" || Model.DefaultPictureModel.HoverImageUrl == null)
                        {
                            <img alt="Default Image" src="https://www.abcwarehouse.com/images/thumbs/default-image_550.png" title="Default Image" id="default-img"/>
                        }
                    }
                    else
                    {
                        <img alt="Default Image" src="https://www.abcwarehouse.com/images/thumbs/default-image_550.png" title="Default Image" id="default-img"/>
                    }
                </div>
            </a>
        </div>
        <div class="attribute-squares-wrapper color-attributes"></div>
    </div>
    <div class="details">
        

        <div class="container">
            <div class="row">
                <div class="col-md-6">

                    <h2 class="product-title">
                        <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
                    </h2>
                    @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
                    {
                        <div class="sku">
                            @Model.Sku
                        </div>
                    }

                    <div class="add-info">
                        @await Component.InvokeAsync("Widget", new
                            {
                                widgetZone =
                                 PublicWidgetZones.ProductBoxAddinfoBefore,
                                additionalData = Model
                            })

                        <!-- ABC: adds mini description to product box -->
                        @if (!string.IsNullOrEmpty(miniDesc))
                        {
                            <p class="product-box-description">@Html.Raw(miniDesc)</p>
                        }
                        @if (!string.IsNullOrEmpty(itemNumberDisplay))
                        {
                            <p class="item-number item-number-style">#@itemNumberDisplay</p>
                        }
                        
                    </div>
                    
                    <!-- Temp for dev -->
                    <div id="pr-reviewsnippet"></div>
                    <div id="pr_snippet_product_72861" data-pr-component="CategorySnippet" data-pr-page_id="OLED55C3PUA" lang="en" data-pr-mounted="true">
                    <span style="display: none" class="product-box-sku">OLED55C3PUA</span>
                    <div class="p-w-r" style=""><section id="pr-category-snippets-OLED55C3PUA" class="" data-testid="category-snippet"><div class="pr-snippet pr-category-snippet"><div class="pr-category-snippet__rating pr-category-snippet__item"><div class="pr-snippet-stars pr-snippet-stars-png" role="img" aria-label="Rated 4.7 out of 5 stars"><div aria-hidden="true" class="pr-rating-stars"><div class="pr-star-v4 pr-star-v4-100-filled"></div><div class="pr-star-v4 pr-star-v4-100-filled"></div><div class="pr-star-v4 pr-star-v4-100-filled"></div><div class="pr-star-v4 pr-star-v4-100-filled"></div><div class="pr-star-v4 pr-star-v4-75-filled"></div></div><div aria-hidden="true" class="pr-snippet-rating-decimal">4.7</div></div></div><div class="pr-category-snippet__total pr-category-snippet__item">1587 Reviews</div></div></section></div></div>
                    <!-- Temp for dev -->
                    
                    @if (Model.ReviewOverviewModel.AllowCustomerReviews)
                    {
                        var ratingPercent = 0;
                        if (Model.ReviewOverviewModel.TotalReviews != 0)
                        {
                            ratingPercent =
                            ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                        }
                        <div class="product-rating-box"
                            title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                            <div class="rating">
                                <div style="width: @(ratingPercent)%">
                                </div>
                            </div>
                        </div>
                    }      
                    <!-- ABC: custom - adds widget zone for reviews -->
                    @await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.ProductBoxAddinfoReviews, additionalData = Model })             
                </div>


                <div class="col-md-6 right-column">
                    @if (!usesCartPricing)
                    {
                        <div class="prices">
                            @{
                                decimal? savedPrice = null;
                            }
                            @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                            {
                                string oldPriceStr = "Compare at " + Model.ProductPrice.OldPrice.Replace(".00", "");
                                <span class="price old-price">@oldPriceStr</span>
                                savedPrice = decimal.Parse(Model.ProductPrice.OldPrice.Substring(1)) -
                                decimal.Parse(Model.ProductPrice.Price.Substring(1));
                            }

                            @if (savedPrice.HasValue && savedPrice.Value > 0)
                            {
                                var saveStr = "Save $" + savedPrice.Value.ToString().Replace(".00", "");
                                <span class="price you-save">@saveStr</span>
                            }

                            @if (savedPrice.HasValue && savedPrice.Value > 0)
                            {
                                <br/><span class="price-sale-tag">Sale: </span>
                            }
                            <span class="price actual-price">@priceStr</span>
                            @if (usesPairPricing)
                            {
                                <span class="pair-price-disclaimer">*pair</span>
                            }
                            @if (Model.ProductPrice.DisplayTaxShippingInfo)
                            {
                                var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                                //tax info is already included in the price (incl/excl tax). that's why we display only shipping
                                //info here
                                //of course, you can modify appropriate locales to include VAT info there
                                <span class="tax-shipping-info">
                                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax",
                                                Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("shippinginfo") }))
                                </span>
                            }
                            @if (!String.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                            {
                                <span class="price base-price">@Model.ProductPrice.BasePricePAngV</span>
                            }
                            
                        </div>
                    }
                    else if (!Model.ProductPrice.DisableBuyButton)
                    {
                        <div class="prices">
                            <span class="price old-price"></span>
                            <span class="price you-save"></span>
                            <span class="price actual-price">Add to cart to see price</span>
                        </div>
                    }
                    else
                    {
                        <div class="prices">
                            <span class="price old-price"></span>
                            <span class="price you-save"></span>
                            <span class="price actual-price"></span>
                        </div>
                    }
                    @if (!usesCartPricing)
                    {
                        @Model.ProductPrice.BasePricePAngV
                    }
                    @await Component.InvokeAsync("Widget", new
                        {
                            widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle,
                            additionalData = Model
                        })
                    @await Component.InvokeAsync("Widget", new
                        {
                            widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter,
                            additionalData = Model
                        })

                    <div class="add-info">
                        @await Component.InvokeAsync("Widget", new
                            {
                                widgetZone =
                                 PublicWidgetZones.ProductBoxAddinfoBefore,
                                additionalData = Model
                            })
                        <div class="prices">
                            @if (Model.ProductPrice.DisplayTaxShippingInfo)
                            {
                                var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                                //of course, you can modify appropriate locales to include VAT info there
                                           <span class="tax-shipping-info">
                                               @T(inclTax ? "Products.Price.TaxShipping.InclTax" :
                                                        "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new
                                                        {
                                                            SeName = await
                                                        Html.GetTopicSeNameAsync("shippinginfo")
                                                        }))
                                           </span>
                            }
                        </div>
                        @await Component.InvokeAsync("Widget", new
                            {
                                widgetZone =
                                 PublicWidgetZones.ProductBoxAddinfoMiddle,
                                additionalData = Model
                            })
                        @await Component.InvokeAsync("Widget", new
                            {
                                widgetZone =
                                 PublicWidgetZones.ProductBoxAddinfoAfter,
                                additionalData = Model
                            })
                    </div>
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                    {
                        <div class="base-price-pangv">
                            @Model.ProductPrice.BasePricePAngV
                        </div>
                    }
                

                    <div class="buttons">
                        <span class="wrapper">
                            @if (!Model.ProductPrice.DisableWishlistButton)
                            {
                                <button type="button" class="button-2 add-to-wishlist-button"
                                    title="@T("ShoppingCart.AddToWishlist")"
                                    onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">@T("ShoppingCart.AddToWishlist")</button>
                            }
                            @if (!Model.ProductPrice.DisableAddToCompareListButton)
                            {
                                <button type="button" class="button-2 add-to-compare-list-button"
                                    title="@T("ShoppingCart.AddToCompareList")"
                                    onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">@T("ShoppingCart.AddToCompareList")</button>
                            }
                        </span>
                    </div>
                    <div class="buttons-lower">
            @if (productFlag != null && productFlag.IsInStoreOnly())
            {
                <form action="@productUrl">
                    <button type="submit" class="button-2 product-box-add-to-cart-button"><span class="no-cart-image">@T("ShoppingCart.InStoreOnly").Text</span></button>
                </form>
            }
            else if (isMattress)
            {
                <form action="@productUrl">
                    <button type="submit" class="button-2 product-box-add-to-cart-button"><span class="no-cart-image">Build Package</span></button>
                    <input type="hidden" name="size" value="@mattressSize" /> 
                </form>
            }
            else if (hasDeliveryOptions && !Model.ProductPrice.DisableBuyButton)
            {
                <button type="button"
                        id="product-box-add-to-cart-button-@Model.Id"
                        class="button-2 product-box-add-to-cart-button"
                        onclick="addCartItemAsync(@Model.Id)"><span>@T("ShoppingCart.AddToCart").Text</span></button>
            }
            @* end custom *@
            else if (!Model.ProductPrice.DisableBuyButton)
            {
                var addToCartText = T("ShoppingCart.AddToCart").Text;

                if (Model.ProductPrice.IsRental)
                {
                    addToCartText = T("ShoppingCart.Rent").Text;
                }
                if (Model.ProductPrice.AvailableForPreOrder)
                {
                    addToCartText = T("ShoppingCart.PreOrder").Text;
                }
                <button type="button"
                        id="product-box-add-to-cart-button-@Model.Id"
                        class="button-2 product-box-add-to-cart-button"><span>@(addToCartText)</span></button>
            }
            else
            {
                <form action="@productUrl">
                    <button type="submit" class="button-2 product-box-add-to-cart-button"><span class="no-cart-image">@T("ShoppingCart.SeeDetails")</span></button>
                </form>
            }
        </div>

                    @if (isOpenBox)
                        {
                            <span class="open-box">Open box from <span class="open-box-price">$@openBoxPrice</span>
                                Available at select locations.</span>
                        }

                    @await Component.InvokeAsync("Widget", new
                        {
                            widgetZone = CustomPublicWidgetZones.ProductBoxAfter,
                            additionalData =
                        Model
                        })
                </div>

            </div>

        </div>
    </div>
</div>

<hr>


