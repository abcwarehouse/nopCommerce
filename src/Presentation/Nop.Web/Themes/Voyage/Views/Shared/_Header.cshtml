@using Nop.Core
@using Nop.Services.Localization
@inject ILocalizationService localizationService
@inject IWorkContext workContext

@{
    var taxTypeSelectorHtml = await Component.InvokeAsync("TaxTypeSelector");
    var currencySelectorHtml = await Component.InvokeAsync("CurrencySelector");
    var languageSelectorHtml = await Component.InvokeAsync("LanguageSelector");
    var headerSelectorWidgetHtml = await Component.InvokeAsync("Widget", new { widgetZone = "header_selectors" });

    var languageId = (await workContext.GetWorkingLanguageAsync()).Id;
    var resource = await localizationService.GetResourceAsync("SevenSpikes.Themes.Voyage.HeaderUpperText", languageId, false, string.Empty, true);
}

<div class="header">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderBefore })
    <div class="header-upper">
        @if (!String.IsNullOrEmpty(await taxTypeSelectorHtml.RenderHtmlContentAsync()) ||
            !String.IsNullOrEmpty(await currencySelectorHtml.RenderHtmlContentAsync()) ||
            !String.IsNullOrEmpty(await languageSelectorHtml.RenderHtmlContentAsync()) ||
            !String.IsNullOrEmpty(await headerSelectorWidgetHtml.RenderHtmlContentAsync()))
        {
            <div class="header-selectors-wrapper first">
                <div class="header-selectors">
                    @await Component.InvokeAsync("TaxTypeSelector")
                    @await Component.InvokeAsync("CurrencySelector")
                    @await Component.InvokeAsync("LanguageSelector")
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderSelectors })
                </div>
            </div>
        }
        @if(!string.IsNullOrEmpty(resource)) {
            <div class="header-text-wrapper middle">
                <span>@T("SevenSpikes.Themes.Voyage.HeaderUpperText")</span>
            </div>
        }
        <div class="header-links-wrapper last">
            <div class="top-menu">
                <ul>
                    <li class="red">
                        <a href="#"><img class="hawthorne-logo" src="/images/Hawthorne%20Logo%20Black.png" alt="Hawthorne"/></a>
                    </li>
                    <li class="red">
                        <a href="/clearance">Clearance</a>
                    </li>
                    <li>
                        <a href="/sale-ad">Weekly Ad</a>
                    </li>
                </ul>
            </div>
            @await Component.InvokeAsync("HeaderLinks")
        </div>
    </div>
    <div class="header-lower">
        <div class="header-logo desktop">
            @await Component.InvokeAsync("Logo")
        </div>
        <div class="header-menu nav-panel">
            <div class="close-button close-menu">
                <span>@T("SevenSpikes.Themes.Common.CloseMenu")</span>
            </div>
            @{
                var menu = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu" });
            }
            @if (String.IsNullOrEmpty(await menu.RenderHtmlContentAsync()))
            {
                @await Component.InvokeAsync("TopMenu")
            }
            else
            {
                @menu
            }
        </div>
        <div class="search-cart-wrapper">
            <div class="search-box store-search-box nav-panel">
                <div class="close-button close-search">
                    <span>@T("SevenSpikes.Themes.Common.CloseMenu")</span>
                </div>
                @await Component.InvokeAsync("SearchBox")
            </div>
            @await Component.InvokeAsync("FlyoutShoppingCart")
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderAfter })
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
</div>