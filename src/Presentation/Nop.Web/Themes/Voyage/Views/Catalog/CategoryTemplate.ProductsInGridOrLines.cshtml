@model CategoryModel

@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@* custom *@
@using Nop.Plugin.Misc.AbcCore.Services
@using Microsoft.AspNetCore.Mvc.ViewComponents
@using Nop.Web.Framework.Infrastructure
@using Nop.Plugin.Misc.AbcCore.Infrastructure
@using Nop.Web.Extensions

@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@inject IViewComponentSelector viewComponentSelector
@* custom *@
@inject FrontEndService frontEndService

@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

	if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;

    // boolean if there are any parent categories
    bool hasChildCategories = frontEndService.CategoryHasChildren(Model.Id);

    var category = Model.MetaTitle;
    bool isFloorcareAccessories = Model.Name == "Floorcare Accessories";

	/* Adding styles specific to categories */
    if (Model.Name == "Stearns & Foster")
    {
        Html.AddHeadCustomParts("<link rel='stylesheet' href='/Misc/StearnsAndFoster/css/style.css'>");
    }

	var isClearance = Model.Name == "Clearance";
}

@using Nop.Core.Domain.Common;
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@using Nop.Services.Catalog;

@if (Model.Name == "Furniture" || Model.Name == "Mattresses")
{
	<style>
		.sub-category-item .title.title {
			bottom: 1em;
			position: absolute;
			top: initial;
		}
	</style>
}

@if (Model.Name == "Floorcare Accessories")
{
	<style>
		.item-grid {
			margin-top: 4em;
		}
	</style>
}
<script>
    // check if it's a leaf category
    $(function () {
        var isLeaf = @Html.Raw(!hasChildCategories ? "true" : "false");
        var isFloorcareAccessoriesPage = @Html.Raw(isFloorcareAccessories ? "true" : "false");
        if (isLeaf || isFloorcareAccessoriesPage) {
            // show product display
            $('.product-selectors').show();
            $('.product-grid').show();
            $('.pager').show();

            // show filters
            $('.filters-button').show();
            $('.nopAjaxFilters7Spikes').show();

            // remove filters depending on if we're in Clearance or not
			var specificationPanels = $('.specificationFilterPanel7Spikes');

			var i = 0;
			for (i = 0; i < specificationPanels.length; i++) {
				var anchorTitle = $(specificationPanels[i]).find('.toggleControl');
				var title = $(anchorTitle).text();
				if (isClearance && title.toLowerCase() !== 'category' && title.toLowerCase() !== 'brands') {
					$(specificationPanels[i]).hide();
				}
				else if (!isClearance && title.toLowerCase() === 'category') {
					categoryPanel = specificationPanels[i];
					$(specificationPanels[i]).hide();
				}
			}

			// Set up 'View More' for brands
			var initialCount = 10;
			var manufacturerPanel = $('.manufacturerFilterPanel7Spikes');
			if (isClearance && manufacturerPanel) {
				var manufacturerChildren = $(manufacturerPanel).find('.checkbox-item');
				if (manufacturerChildren.length >= initialCount) {
					var filtersCheckboxPanel = $(manufacturerPanel).find('.filtersCheckboxPanel');
					$(filtersCheckboxPanel).append('<div style="display: flex"><a href="javascript:void(0)" id="view-more-brands">View More</a></div>');
					$(filtersCheckboxPanel).append('<div style="display: flex"><a href="javascript:void(0)" id="view-less-brands" style="display: none">View Less</a></div>');
					var i = 0;
					for (i = 0; i < manufacturerChildren.length; i++) {
						if (i > initialCount - 1) {
							$(manufacturerChildren[i]).hide();
						}
					}
					$('#view-more-brands').click(function (e) {
						var i = 0;
						for (i = 0; i < manufacturerChildren.length; i++) {
							$(manufacturerChildren[i]).show();
						}
						$(this).hide();
						$('#view-less-brands').show();
					});
					$('#view-less-brands').click(function (e) {
						var i = initialCount - 1;
						for (i = initialCount - 1; i < manufacturerChildren.length; i++) {
							$(manufacturerChildren[i]).hide();
						}
						$(this).hide();
						$('#view-more-brands').show();
					});
				}
			}

			// Set up 'View More' for categories
			var categoryPanel = specificationPanels[0];
			if (isClearance && categoryPanel) {
				var categoryChildren = $(categoryPanel).find('.checkbox-item');
				if (categoryChildren.length >= initialCount) {
					var filtersCheckboxPanel = $(categoryPanel).find('.filtersCheckboxPanel');
					$(filtersCheckboxPanel).append('<div style="display: flex"><a href="javascript:void(0)" id="view-more-categories">View More</a></div>');
					$(filtersCheckboxPanel).append('<div style="display: flex"><a href="javascript:void(0)" id="view-less-categories" style="display: none">View Less</a></div>');
					var i = 0;
					for (i = 0; i < categoryChildren.length; i++) {
						if (i > initialCount - 1) {
							$(categoryChildren[i]).hide();
						}
					}
					$('#view-more-categories').click(function (e) {
						var i = 0;
						for (i = 0; i < categoryChildren.length; i++) {
							$(categoryChildren[i]).show();
						}
						$(this).hide();
						$('#view-less-categories').show();
					});
					$('#view-less-categories').click(function (e) {
						var i = initialCount - 1;
						for (i = initialCount - 1; i < categoryChildren.length; i++) {
							$(categoryChildren[i]).hide();
						}
						$(this).hide();
						$('#view-more-categories').show();
					});
				}

				// Now move categories below price range
				$(categoryPanel).insertAfter(".priceRangeFilterPanel7Spikes");
			}
        }
        else {
            // hide product display
            $('.product-selectors').hide();
            $('.product-grid').hide();
            $('.pager').hide();

            // hide filters
            $('.filters-button').hide();
            $('.nopAjaxFilters7Spikes').hide();

            // we have to remove the filter button in case of mobile
            $('.filters-button').remove();
        }
    });

	// Update the title of the page if applicable
    $(document).ajaxComplete(function(event,request,settings) {
		var dataJson = settings.data;
		if (dataJson === undefined || dataJson === null) {
			return;
		}
		var data = JSON.parse(dataJson);
		var pageNumber = data.pageNumber;
		if (pageNumber === undefined || pageNumber === null) {
			return;
		}
		var currentTitle = document.title;
		var parts = currentTitle.split(" | ");
		var newTitle = parts.length === 3 ?
			parts[0] + " | Page " + pageNumber + " | " + parts[2] :
			parts[0] + " | Page " + pageNumber + " | " + parts[1];
		document.title = newTitle;
	});
</script>
@*category breadcrumb*@
@section Breadcrumb
{
	@if (Model.DisplayCategoryBreadcrumb)
	{
		<div class="breadcrumb">
			<ul>
				<li>
					<a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
					<span class="delimiter">@breadcrumbDelimiter</span>
				</li>
				@foreach (var cat in Model.CategoryBreadcrumb)
				{
					var isLastCategory = cat.Id == Model.Id;
					<li>
						@if (isLastCategory)
						{
							<strong class="current-item">@cat.Name</strong>
						}
						else
						{
							<a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
							<span class="delimiter">@breadcrumbDelimiter</span>
						}
					</li>
				}
			</ul>
		</div>
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
	}
}

@section CatalogFilters {
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
    @await Html.PartialAsync("_CatalogFilters", Model.CatalogProductsModel)
}

<div class="page category-page">
	@if (hasChildCategories)
	{
		<div class="page-title">
			<h1>@Model.Name</h1>
		</div>
	}
	<div class="page-body">
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
		@if (hasChildCategories == false)
		{
			<h1 class="leaf-category-title">@Model.Name</h1>
		}
		@*description*@
		@if (!String.IsNullOrWhiteSpace(Model.Description))
		{
			<div class="category-description">
				@Html.Raw(Model.Description)
			</div>
		}
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model.Id })
		@*subcategories*@
		@if (Model.SubCategories.Count > 0)
		{
			<div class="category-grid sub-category-grid">
				<div class="item-grid">
					@foreach (var item in Model.SubCategories)
					{
						<div class="item-box">
							<div class="sub-category-item">
								<h2 class="title">
									<a href="@Url.RouteUrl("Category", new {SeName = item.SeName})" title="@item.PictureModel.Title">
										@item.Name
									</a>
								</h2>
								<div class="picture">
									<a href="@Url.RouteUrl("Category", new {SeName = item.SeName})" title="@item.PictureModel.Title">
										<img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
									</a>
								</div>
							</div>
						</div>
					}
				</div>
			</div>
		}
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
		@*featured products*@
		@if (Model.FeaturedProducts.Count > 0)
		{
			<div class="product-grid featured-product-grid">
				<div class="title">
					<strong>@T("Products.FeaturedProducts")</strong>
				</div>
				<div class="item-grid">
					@foreach (var item in Model.FeaturedProducts)
					{
						<div class="item-box">
							@Html.Partial("_ProductBox", item)
						</div>
					}
				</div>
			</div>
		}
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
		@await Html.PartialAsync("_CatalogSelectors", Model.CatalogProductsModel)
        @await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })
        @{ 
            var catalogProductsViewData = new ViewDataDictionary(ViewData);
            catalogProductsViewData["fetchUrl"] = Html.Raw(Url.Action("GetCategoryProducts", "Catalog", new { categoryId = Model.Id }));
        }
        @await Html.PartialAsync("_CatalogProducts", Model.CatalogProductsModel, catalogProductsViewData)
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
	</div>
</div>
