@using System.Web;
@using Nop.Plugin.Misc.AbcCore.Delivery

@model (int shoppingCartItemId, string attributeInfo);

@{
    // Need to check whether Edit is an option
    string controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    string actionName = Url.ActionContext.RouteData.Values["action"].ToString();
    

    var attributes = @Model.attributeInfo.Split("<br />");
    var deliveryPickupOptions = attributes.FirstOrDefault(a => a.Contains($"{AbcDeliveryConsts.DeliveryPickupOptionsProductAttributeName}: "));
    var showEdit = deliveryPickupOptions != null &&
                   (controllerName.Equals("ShoppingCart") && actionName.Equals("Cart")) ||
                   (controllerName.Equals("Checkout") && actionName.Equals("BillingAddress")) ||
                   (controllerName.Equals("Checkout") && actionName.Equals("ShippingAddress")) ||
                   (controllerName.Equals("CustomCheckout") && actionName.Equals("ShippingMethod"));
    if (deliveryPickupOptions != null)
    {
        // remove attribute name
        deliveryPickupOptions = deliveryPickupOptions.Substring(deliveryPickupOptions.IndexOf(':') + 2);
        // remove second price difference
        var braceIndex = deliveryPickupOptions.IndexOf('[') == -1 ? deliveryPickupOptions.Length : deliveryPickupOptions.IndexOf('[');
        deliveryPickupOptions = deliveryPickupOptions.Substring(0, braceIndex);
        deliveryPickupOptions = deliveryPickupOptions.Split(":")[0];
        deliveryPickupOptions = deliveryPickupOptions.Trim();
    }

    var haulaway = attributes.FirstOrDefault(a => a.Contains("Haul Away "));
    if (haulaway != null)
    {
        // remove attribute name
        haulaway = haulaway.Substring(haulaway.IndexOf(':') + 2);
        // remove second price difference
        var braceIndex = haulaway.IndexOf('[') == -1 ? haulaway.Length : haulaway.IndexOf('[');
        haulaway = haulaway.Substring(0, braceIndex);
        haulaway = haulaway.Trim();
    }

    var pickup = attributes.FirstOrDefault(a => a.Contains("Pickup: "));
    var available = attributes.FirstOrDefault(a => a.Contains("Available: "));
    if (pickup != null && available != null)
    {
        // remove attribute name
        pickup = pickup.Substring(pickup.IndexOf(':') + 2);
        available = available.Substring(available.IndexOf(':') + 2);
    }

    var warranty = attributes.FirstOrDefault(a => a.Contains("Warranty: "));
    if (warranty != null)
    {
        // remove attribute name
        warranty = warranty.Substring(warranty.IndexOf(':') + 2);
        // change format of price difference
        warranty = warranty.Replace('[', '(').Replace(']', ')');
        var plusIndex = warranty.IndexOf('+');
        if (plusIndex != -1)
        {
            warranty.Remove(plusIndex, 1);
        }
        warranty = warranty.Trim().Replace("+", "");
    }

    var accessories = attributes.FirstOrDefault(a => a.Contains("Accessories "));
    if (accessories != null)
    {
        // remove attribute name
        accessories = accessories.Substring(accessories.IndexOf(':') + 2);
        // change format of price difference
        accessories = accessories.Replace('[', '(').Replace(']', ')');
        var plusIndex = accessories.IndexOf('+');
        if (plusIndex != -1)
        {
            accessories.Remove(plusIndex, 1);
        }
        accessories = accessories.Trim().Replace("+", "");
    }

    var mattressSize = attributes.FirstOrDefault(a => a.Contains("Mattress Size: "));
    if (mattressSize != null)
    {
        // remove attribute name
        mattressSize = mattressSize.Substring(mattressSize.IndexOf(':') + 2);
        // remove second price difference
        var braceIndex = mattressSize.IndexOf('[') == -1 ? mattressSize.Length : mattressSize.IndexOf('[');
        mattressSize = mattressSize.Substring(0, braceIndex);
        mattressSize = mattressSize.Trim().Replace("+", "");

        // don't show edit for mattresses
        showEdit = false;
    }

    var mattressBase = attributes.FirstOrDefault(a => a.Contains("Base "));
    if (mattressBase != null)
    {
        // remove attribute name
        mattressBase = mattressBase.Substring(mattressBase.IndexOf(':') + 2);
        // remove second price difference
        var braceIndex = mattressBase.IndexOf('[') == -1 ? mattressBase.Length : mattressBase.IndexOf('[');
        mattressBase = mattressBase.Substring(0, braceIndex);
        mattressBase = mattressBase.Trim().Replace("+", "");
    }

    var mattressFrame = attributes.FirstOrDefault(a => a.Contains("Frame "));
    if (mattressFrame != null)
    {
        // remove attribute name
        mattressFrame = mattressFrame.Substring(mattressFrame.IndexOf(':') + 2);
        // remove second price difference
        var braceIndex = mattressFrame.IndexOf('[') == -1 ? mattressFrame.Length : mattressFrame.IndexOf('[');
        mattressFrame = mattressFrame.Substring(0, braceIndex);
        mattressFrame = mattressFrame.Trim().Replace("+", "");
    }

    var mattressProtector = attributes.FirstOrDefault(a => a.Contains("Mattress Protector "));
    if (mattressProtector != null)
    {
        // remove attribute name
        mattressProtector = mattressProtector.Substring(mattressProtector.IndexOf(':') + 2);
        // remove second price difference
        var braceIndex = mattressProtector.IndexOf('[') == -1 ? mattressProtector.Length : mattressProtector.IndexOf('[');
        mattressProtector = mattressProtector.Substring(0, braceIndex);
        mattressProtector = mattressProtector.Trim().Replace("+", "");
    }

    var showMattress = mattressSize != null ||
                       mattressBase != null ||
                       mattressFrame != null ||
                       mattressProtector != null;
}

@if (attributes.Any())
{
    <div class="abc-cart-attribute-info">
        @if (showMattress)
        {
            <div class="abc-cart-attribute-info__section">
                <h4>Mattress Details</h4>
                @if (mattressSize != null) { <p>Size: @Html.Raw(@mattressSize)</p> }
                @if (mattressBase != null) { <p>Base: @Html.Raw(@mattressBase)</p> }
                @if (mattressFrame != null) { <p>Frame: @Html.Raw(@mattressFrame)</p> }
                @if (mattressProtector != null) { <p>Protector: @Html.Raw(@mattressProtector)</p> }
            </div>
        }

        @if (deliveryPickupOptions != null)
        {
            <div class="abc-cart-attribute-info__section">
                <h4>Delivery/Pickup Options</h4>
                <p>@Html.Raw(@deliveryPickupOptions)</p>
                @if (haulaway != null)
                {
                    <p>@haulaway</p>
                }
                @if (pickup != null && available != null)
                {
                    <p>@pickup: @available</p>
                }
            </div>
        }
        else if (pickup != null)
        {
            <div class="abc-cart-attribute-info__section">
                <h4>Pickup</h4>
                <p>
                    @pickup<br />
                    @available
                </p>
            </div>
        }

        @if (warranty != null)
        {
            <div class="abc-cart-attribute-info__section">
                <h4>Warranty</h4>
                <p>@Html.Raw(@warranty)</p>
            </div>
        }

        @if (accessories != null)
        {
            <div class="abc-cart-attribute-info__section">
                <h4>Accessories</h4>
                <p>@Html.Raw(@accessories)</p>
            </div>
        }

        @if (showEdit)
        {
            <a onclick="editCartItemAsync(@Model.shoppingCartItemId)">EDIT</a>
        }
    </div>
}
