@model IList<ProductDetailsModel.ProductAttributeModel>
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Media
@using System.Text
@using Nop.Services.Catalog
@using Nop.Services.Media
@using Nop.Web.Models.Catalog
@using Nop.Plugin.Misc.AbcFrontend.Extensions;
@using Nop.Plugin.Misc.AbcCore.Delivery;
@inject IDownloadService downloadService
@inject CatalogSettings catalogSettings

@{
    var isMattress = false;

    foreach (var attribute in Model)
    {
        var values = attribute.Values;
        if (values.Select(v => v.Name).Contains("Home Delivery (Price in Cart)"))
        {
            isMattress = true;
            break;
        }
    }

    var isAccessoryAlreadySelected = false;
}

@if (Model.Count > 0)
{
    <div class="attributes">
        <dl>
            @foreach (var attribute in Model)
            {
                var controlId = $"{NopCatalogDefaults.ProductAttributePrefix}{attribute.Id}";
                var textPrompt = !string.IsNullOrEmpty(attribute.TextPrompt) ? attribute.TextPrompt : attribute.Name;
                // custom: change Warranty to Extended Warranty
                textPrompt = textPrompt == "Warranty" ? "Extended Warranty" : textPrompt;
                // custom: configure hidden items
                var isHidden = attribute.IsHiddenPreload() ?
                    "display:none" :
                    "";
                
                <dt id="@($"{NopCatalogDefaults.ProductAttributePrefix}label_{attribute.Id}")" style="@($"{isHidden}")">
                    <label class="text-prompt">
                        @textPrompt
                    </label>
                    @if (attribute.Name == AbcDeliveryConsts.DeliveryPickupOptionsProductAttributeName)
                    {
                        <i class="fas fa-info-circle delivery-options-info"></i>
                    }
                    @if (attribute.Name == "Warranty")
                    {
                        <i class="fas fa-info-circle warranty-info"></i>
                    }
                    @* ABC: also require if warranty *@
                    @if (attribute.IsRequired || attribute.Name == "Warranty")
                    {
                        <span class="required">*</span>
                    }
                    @* ABC: Use warranty-specific description *@
                    @if (attribute.Name != "Warranty" && !string.IsNullOrEmpty(attribute.Description))
                    {
                        <div class="attribute-description">
                            @Html.Raw(attribute.Description)
                        </div>
                    }
                </dt>
                var optionClass = "";
                if (attribute.Name.Contains("Accessories")) { optionClass = "accessories"; }
                <dd id="@($"{NopCatalogDefaults.ProductAttributePrefix}input_{attribute.Id}")" class="@(optionClass)" style="@($"{isHidden}")">
                    @switch (attribute.AttributeControlType)
                    {
                        case AttributeControlType.DropdownList:
                            {
                                @* custom: add mattress classes *@
                                var mattressClass = "";
                                if (attribute.Name == "Mattress Size") { mattressClass = "mattress-size"; }
                                if (attribute.Name.Contains("Base")) { mattressClass = "mattress-base"; }
                                if (attribute.Name.Contains("Frame")) { mattressClass = "mattress-frame"; }
                                if (attribute.Name.Contains("Protector")) { mattressClass = "mattress-protector"; }
                                <select class="@(mattressClass)" name="@(controlId)" id="@(controlId)" @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onchange=\"showHideDropdownQuantity('{controlId}')\"") : null)>
                                    @if (!attribute.IsRequired)
                                    {
                                        <option value="0">---</option>
                                    }
                                    @foreach (var attributeValue in attribute.Values)
                                    {
                                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                            attributeValue.Name :
                                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                                attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text;

                                        @* custom: remove the price adjustment for mattress sizes *@ 
                                        var mattressSizes = new string[]
                                        {
                                            "Twin",
                                            "TwinXL",
                                            "Full",
                                            "Queen",
                                            "Queen-Flexhead",
                                            "King",
                                            "King-Flexhead",
                                            "California King",
                                            "California King-Flexhead"
                                        };
                                        if (mattressSizes.Contains(attributeValue.Name))
                                        {
                                            attributeName = attributeValue.Name;
                                        }
                                        @* end custom *@
                                        
                                        <option selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeName</option>
                                    }
                                </select>
                                foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                                {
                                    <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                        <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                        <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)" />
                                    </div>
                                }
                                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        showHideDropdownQuantity("@controlId");
                                    });
                                </script>
                            }
                            break;
                        case AttributeControlType.RadioList:
                            {
                                <ul class="option-list">
                                    @foreach (var attributeValue in attribute.Values)
                                    {
                                        // ABC: do not provide price adjustment if delivery option, this is included in the title of the pav
                                        var attributeName = attribute.Name == AbcDeliveryConsts.DeliveryPickupOptionsProductAttributeName ?
                                            attributeValue.Name :
                                            string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                                attributeValue.Name :
                                                $"{attributeValue.Name} ({attributeValue.PriceAdjustment.Trim('+')})";
                                        // ABC: if an accessory is selected, don't select the "none" option
                                        if (!isAccessoryAlreadySelected)
                                        {
                                            isAccessoryAlreadySelected = attribute.Name.Contains("Accessories") && attributeValue.IsPreSelected;
                                        }
                                        // ABC: Keep a list of the "default" options
                                        var isDecline = attributeValue.Name.Contains("Decline");
                                        var is4ft = attributeValue.Name.Contains("4ft Rubber Hoses");
                                        var isWarranty = attribute.Name.Contains("Warranty");
                                        if (!isAccessoryAlreadySelected && attribute.Name == "Accessories (Delivery)")
                                        {
                                            attributeValue.IsPreSelected = is4ft;
                                        }

                                        var undermessage = "";
                                        if (attributeName.Contains(":"))
                                        {
                                            int index = attributeName.IndexOf(":");
                                            undermessage = index >= 0 ? attributeName.Substring(index + 1) : string.Empty;
                                            attributeName = attributeName.Split(":")[0];
                                        }

                                        <li>
                                            <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id"
                                                   checked="@attributeValue.IsPreSelected"
                                                   @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}')\"") : null)
                                                   @(isWarranty ? Html.Raw($"class=\"is-warranty\"") : null) />
                                            <label for="@(controlId)_@(attributeValue.Id)">@attributeName</label>
                                            <!-- ABC: special messaging for decline -->
                                            @if (isDecline && attributeValue.Name == "Decline New Hose")
                                            {
                                                <div id="decline-new-hose" style="font-size: 8pt">
                                                    New hoses are recommended for all washer installations for coverage against property damage.
                                                </div>
                                            }
                                            @if (attributeValue.Name.Contains("Home Delivery and Installation ("))
                                            {
                                                <div id="undermessage" style="font-size: 8pt">
                                                    @undermessage
                                                </div>
                                            }
                                            

                                            @if (attributeValue.CustomerEntersQty)
                                            {
                                                <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                                    <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                                    <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)" />
                                                </div>
                                            }
                                        </li>
                                    }
                                    @if (attribute.Name == AbcDeliveryConsts.DeliveryPickupOptionsProductAttributeName)
                                    {
                                        <div class="cart-slideout__pickup-in-store"></div>
                                    }
                                    @if (attribute.Name == "Warranty")
                                    {
                                        <input id="warranty-none" class="is-warranty" type="radio" name="@(controlId)" value="0" />
                                        <label for="warranty-none">No Additional Warranty ($0)</label>
                                    }
                                </ul>
                                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        showHideRadioQuantity("@controlId");
                                    });
                                </script>
                            }
                            break;
                        case AttributeControlType.Checkboxes:
                        case AttributeControlType.ReadonlyCheckboxes:
                            {
                                <ul class="option-list">
                                    @foreach (var attributeValue in attribute.Values)
                                    {
                                        // ABC: do not provide price adjustment, this is included in the title of the pav
                                        @* var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                            attributeValue.Name :
                                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment,
                                                attributeValue.CustomerEntersQty ? T("Products.ProductAttributes.PriceAdjustment.PerItem").Text : string.Empty).Text; *@
                                        var attributeName = attributeValue.Name;
                                        var isHaulaway = attributeName.Contains("Haul Away Old") || attributeName.Contains("Move Old");
                                        <li>
                                            @* ABC: add isHaulaway for dynamic switching *@
                                            <input id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" @(attribute.AttributeControlType == AttributeControlType.ReadonlyCheckboxes ? Html.Raw(" disabled=\"disabled\"") : null)
                                                   @(attributeValue.CustomerEntersQty ? Html.Raw($"onchange=\"showHideCheckboxQuantity('{controlId}_{attributeValue.Id}')\"") : null)
                                                   @(isHaulaway ? Html.Raw($"class=\"is-haulaway\"") : null) />
                                            <label for="@(controlId)_@(attributeValue.Id)">@attributeName</label>

                                            @if (attributeValue.CustomerEntersQty)
                                            {
                                                <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                                    <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                                    <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)" />
                                                    <script asp-location="Footer">
                                                        $(document).ready(function() {
                                                            showHideCheckboxQuantity('@(controlId)_@(attributeValue.Id)');
                                                        })
                                                    </script>
                                                </div>
                                            }
                                            @if (attributeName.Contains("Move Old"))
                                            {
                                                <div id="haulaway-move" style="font-size: 8pt">
                                                    Old appliances must be disconnected from water and power.
                                                </div>
                                            }
                                        </li>
                                    }
                                </ul>
                            }
                            break;
                        case AttributeControlType.TextBox:
                            {
                                <input name="@(controlId)" type="text" class="textbox" id="@(controlId)" value="@(attribute.DefaultValue)" />
                            }
                            break;
                        case AttributeControlType.MultilineTextbox:
                            {
                                <textarea cols="20" id="@(controlId)" name="@(controlId)">@(attribute.DefaultValue)</textarea>
                            }
                            break;
                        case AttributeControlType.Datepicker:
                            {
                                <nop-date-picker 
                                    asp-day-name="@(controlId + "_day")" 
                                    asp-month-name="@(controlId + "_month")" 
                                    asp-year-name="@(controlId + "_year")"
                                    asp-begin-year="@(DateTime.Now.Year)"
                                    asp-end-year="@(DateTime.Now.Year + catalogSettings.CountDisplayedYearsDatePicker)"
                                    asp-selected-day="@(attribute.SelectedDay)"
                                    asp-selected-month="@(attribute.SelectedMonth)"
                                    asp-selected-year="@(attribute.SelectedYear)"
                                />
                            }
                            break;
                        case AttributeControlType.FileUpload:
                            {
                                Download download = null;
                                if (!string.IsNullOrEmpty(attribute.DefaultValue))
                                {
                                    download = await downloadService.GetDownloadByGuidAsync(new Guid(attribute.DefaultValue));
                                }

                                //register CSS and JS
                                Html.AddCssFileParts(ResourceLocation.Footer, "~/lib_npm/fine-uploader/fine-uploader/fine-uploader.min.css");
                                Html.AddScriptParts(ResourceLocation.Footer, "~/lib_npm/fine-uploader/jquery.fine-uploader/jquery.fine-uploader.min.js");

                                //ex. ['jpg', 'jpeg', 'png', 'gif'] or []
                                var allowedFileExtensions = string.Join(", ", attribute.AllowedFileExtensions.Select(x => "'" + x.Trim() + "'").ToList());

                                if (download != null)
                                {
                                    <input id="@(controlId)" name="@(controlId)" type="hidden" value="@download.DownloadGuid" />
                                }
                                else
                                {
                                    <input id="@(controlId)" name="@(controlId)" type="hidden" />
                                }

                                @*fine uploader container*@
                                <div id="@(controlId)uploader"></div>
                                @*fine uploader template (keep it synchronized to \Content\fineuploader\templates\default.html)*@
                                <script type="text/template" asp-location="Footer" id="@(controlId)-qq-template">
                                    <div class="qq-uploader-selector qq-uploader">
                                        <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                                            <span>@T("Common.FileUploader.DropFiles")</span>
                                        </div>
                                        <div class="qq-upload-button-selector qq-upload-button">
                                            <div>@T("Common.FileUploader.Upload")</div>
                                        </div>
                                        <span class="qq-drop-processing-selector qq-drop-processing">
                                            <span>@T("Common.FileUploader.Processing")</span>
                                            <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
                                        </span>
                                        <ul class="qq-upload-list-selector qq-upload-list">
                                            <li>
                                                <div class="qq-progress-bar-container-selector">
                                                    <div class="qq-progress-bar-selector qq-progress-bar"></div>
                                                </div>
                                                <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                                                <span class="qq-edit-filename-icon-selector qq-edit-filename-icon"></span>
                                                <span class="qq-upload-file-selector qq-upload-file"></span>
                                                <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                                                <span class="qq-upload-size-selector qq-upload-size"></span>
                                                <a class="qq-upload-cancel-selector qq-upload-cancel" href="#">@T("Common.FileUploader.Cancel")</a>
                                                <a class="qq-upload-retry-selector qq-upload-retry" href="#">@T("Common.FileUploader.Retry")</a>
                                                <a class="qq-upload-delete-selector qq-upload-delete" href="#">@T("Common.FileUploader.Delete")</a>
                                                <span class="qq-upload-status-text-selector qq-upload-status-text"></span>
                                            </li>
                                        </ul>
                                    </div>
                                </script>
                                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $("#@(controlId)uploader").fineUploader({
                                            request: {
                                                endpoint: '@(Url.RouteUrl("UploadFileProductAttribute", new { attributeId = attribute.Id }))'
                                            },
                                            template: "@(controlId)-qq-template",
                                            multiple: false,
                                            validation: {
                                                allowedExtensions: [@Html.Raw(allowedFileExtensions)]
                                            }
                                        }).on("complete", function(event, id, name, responseJSON, xhr) {
                                            $("#@(controlId)").val(responseJSON.downloadGuid);
                                            if (responseJSON.success) {
                                                $("#@(controlId + "downloadurl")").html("<a href='" + responseJSON.downloadUrl + "'>@T("Common.FileUploader.DownloadUploadedFile")</a>");
                                                $("#@(controlId + "remove")").show();
                                            }
                                            if (responseJSON.message) {
                                                alert(responseJSON.message);
                                            }
                                        });

                                        $("#@(controlId + "remove")").on('click', function(e) {
                                            $("#@(controlId + "downloadurl")").html("");
                                            $("#@(controlId)").val('');
                                            $(this).hide();
                                        });
                                    });
                                </script>
                                <div id="@(controlId + "downloadurl")">
                                    @if (download != null)
                                    {
                                        <a href="@(Url.Action("GetFileUpload", "Download", new {downloadId = download.DownloadGuid}))" class="download-uploaded-file">@T("Common.FileUploader.DownloadUploadedFile")</a>
                                    }
                                </div>
                                <div>
                                    @if (download != null)
                                    {
                                        <a id="@(controlId + "remove")" class="remove-download-button">@T("Common.FileUploader.RemoveDownload")</a>
                                    }
                                    else
                                    {
                                        <a id="@(controlId + "remove")" class="remove-download-buttonn" style="display: none;">@T("Common.FileUploader.RemoveDownload")</a>
                                    }
                                </div>

                            }
                            break;
                        case AttributeControlType.ColorSquares:
                            {
                                <ul class="option-list attribute-squares color-squares" id="color-squares-@(attribute.Id)">
                                    @foreach (var attributeValue in attribute.Values)
                                    {
                                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                            attributeValue.Name :
                                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, string.Empty).Text;
                                        <li @(attributeValue.IsPreSelected ? @Html.Raw(" class=\"selected-value\"") : null)>
                                            <label for="@(controlId)_@(attributeValue.Id)">
                                                <span class="attribute-square-container" title="@attributeName">
                                                    <span class="attribute-square" style="background-color:@(attributeValue.ColorSquaresRgb);">&nbsp;</span>
                                                </span>
                                                <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                                       @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}')\"") : null)/>
                                            </label>
                                        </li>
                                    }
                                </ul>
                                foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                                {
                                    <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                        <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                        <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)" />
                                    </div>
                                }
                                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $('.attributes #color-squares-@(attribute.Id)').on('click', 'input', function(event) {
                                            $('.attributes #color-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                            $(this).closest('li').addClass('selected-value');
                                        });
                                        showHideRadioQuantity("@controlId");
                                    });
                                </script>
                            }
                            break;
                        case AttributeControlType.ImageSquares:
                            {
                                <ul class="option-list attribute-squares image-squares" id="image-squares-@(attribute.Id)">
                                    @foreach (var attributeValue in attribute.Values)
                                    {
                                        var attributeName = string.IsNullOrEmpty(attributeValue.PriceAdjustment) ?
                                            attributeValue.Name :
                                            T("Products.ProductAttributes.PriceAdjustment", attributeValue.Name, attributeValue.PriceAdjustment, string.Empty).Text;
                                        <li @(attributeValue.IsPreSelected ? @Html.Raw(" class=\"selected-value\"") : null)>
                                            <label for="@(controlId)_@(attributeValue.Id)">
                                                <span class="attribute-square-container">
                                                    <span class="attribute-square" style="background: url('@(attributeValue.ImageSquaresPictureModel.ImageUrl)') 50% 50% no-repeat;">&nbsp;</span>
                                                </span>
                                                <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected"
                                                       @(attribute.Values.Any(value => value.CustomerEntersQty) ? Html.Raw($"onclick=\"showHideRadioQuantity('{controlId}', true)\"") : null)/>
                                            </label>
                                            <div class="tooltip-container">
                                                <div class="tooltip-header">@attributeName</div>
                                                <div class="tooltip-body"><img src="@(attributeValue.ImageSquaresPictureModel.FullSizeImageUrl)" alt="@attributeName" /></div>
                                            </div>
                                        </li>
                                    }
                                </ul>
                                foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
                                {
                                    <div class="qty-box" id="@(controlId)_@(attributeValue.Id)_qty_box" style="display:none">
                                        <label for="@(controlId)_@(attributeValue.Id)_qty">@(T("Products.ProductAttributes.PriceAdjustment.Quantity").Text)</label>
                                        <input type="text" name="@(controlId)_@(attributeValue.Id)_qty" id="@(controlId)_@(attributeValue.Id)_qty" value="@(attributeValue.Quantity)" />
                                    </div>
                                }
                                <script asp-location="Footer">
                                    $(document).ready(function() {
                                        $('.attributes #image-squares-@(attribute.Id)').on('click', 'input', function(event) {
                                            $('.attributes #image-squares-@(attribute.Id)').find('li').removeClass('selected-value');
                                            $(this).closest('li').addClass('selected-value');
                                        });
                                        showHideRadioQuantity("@controlId", true);
                                    });
                                </script>
                            }
                            break;
                    }
                </dd>
            }
        </dl>
        @* ABC: section for mattresses *@
        @if (isMattress)
        {
            <div>
                @T("AbcWarehouse.Plugin.Widgets.CartSlideout.MattressMessaging")
            </div>
        }
        <script asp-location="Footer">
            function showHideDropdownQuantity(id) {
                $('select[name=' + id + '] > option').each(function() {
                    $('#' + id + '_' + this.value + '_qty_box').hide();
                });
                $('#' + id + '_' + $('select[name=' + id + '] > option:selected').val() + '_qty_box').css('display', 'inline-block');
            };

            function showHideRadioQuantity(id) {
                $('input[name=' + id + ']:radio').each(function() {
                    $('#' + $(this).attr('id') + '_qty_box').hide();
                });
                $('#' + id + '_' + $('input[name=' + id + ']:radio:checked').val() + '_qty_box').css('display', 'inline-block');
            };

            function showHideCheckboxQuantity(id) {
                if ($('#' + id).is(':checked'))
                    $('#' + id + '_qty_box').css('display', 'inline-block');
                else
                    $('#' + id + '_qty_box').hide();
            };
        </script>
    </div>

    //dynamic update support
    var attributesHaveConditions = Model.Any(x => x.HasCondition);
    var attributesHaveAssociatedPictures = Model.Any(x => x.ProductId > 0);
    var attributeChangeScriptsBuilder = new StringBuilder();
    var productId = Model.First().ProductId;
    var attributeChangeHandlerFuncName = $"attribute_change_handler_{productId}";
    if (catalogSettings.AjaxProcessAttributeChange)
    {
        //generate change event script
        foreach (var attribute in Model)
        {
            var controlId = $"{NopCatalogDefaults.ProductAttributePrefix}{attribute.Id}";
            switch (attribute.AttributeControlType)
            {
                case AttributeControlType.DropdownList:
                    {
                        attributeChangeScriptsBuilder.AppendFormat("$('#{0}').on('change', function(){{{1}();}});\n", controlId, attributeChangeHandlerFuncName);
                    }
                    break;
                case AttributeControlType.RadioList:
                case AttributeControlType.ColorSquares:
                case AttributeControlType.ImageSquares:
                    {
                        foreach (var attributeValue in attribute.Values)
                        {
                            attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').on('click', function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
                        }
                    }
                    break;
                case AttributeControlType.Checkboxes:
                case AttributeControlType.ReadonlyCheckboxes:
                    {
                        foreach (var attributeValue in attribute.Values)
                        {
                            attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}').on('click', function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
                        }
                    }
                    break;
                default:
                    break;
            }

            foreach (var attributeValue in attribute.Values.Where(value => value.CustomerEntersQty))
            {
                attributeChangeScriptsBuilder.AppendFormat("$('#{0}_{1}_qty').on('input propertychange paste', function(){{{2}();}});\n", controlId, attributeValue.Id, attributeChangeHandlerFuncName);
            }
        }

        //render scripts
        //almost the same implementation is used in the \Views\Product\_RentalInfo.cshtml file
        <script asp-location="Footer">
            function updateSavingsStory() {
                var overallPrice = parseFloat($('[class^="price-value-"]')[0].innerText.replace('$', '').replace(',', ''));
                var oldProductPriceElement = document.querySelector('.old-product-price');
                var youSaveAmtElement = document.querySelector('.you-save-amt');

                // add any bundled items
                var visibleDropdowns = document.querySelectorAll('dd:not([style="display:none"]) select');
                var bundledItemsCost = 0;
                for (var i = 0; i < visibleDropdowns.length; i++)
                {
                    var v = visibleDropdowns[i];
                    if (!v.className.includes('mattress-size') && v.selectedIndex != 0)
                    {
                        var selectedOptionText = v.selectedOptions[0].text;
                        var firstBracketIndex = selectedOptionText.indexOf('[');
                        if (firstBracketIndex == -1) {
                            continue;
                        }
                        selectedOptionText = selectedOptionText.substring(firstBracketIndex);
                        selectedOptionText = selectedOptionText.replace('[', '')
                                                               .replace(']', '')
                                                               .replace('$', '')
                                                               .replace('+', '')
                                                               .replace('-', '');
                        bundledItemsCost += parseFloat(selectedOptionText);
                    }
                }

                var productAttributeValueId = document.querySelector('.mattress-size').selectedOptions[0].value;
                var getProductAttributeValueUrl = `/api/ProductAttributeValue/${productAttributeValueId}`;
                $.ajax({
                    url: getProductAttributeValueUrl,
                    success: function (data) {
                        var oldProductPriceAmount = document.querySelector('.old-product-price span');
                        var updatedOldPrice = data.Cost + bundledItemsCost; 
                        oldProductPriceAmount.innerText = '$' + new Intl.NumberFormat('en-US').format(updatedOldPrice);

                        var difference = updatedOldPrice - overallPrice;
                        youSaveAmtElement.innerText = "You Save $" + new Intl.NumberFormat('en-US').format(difference);

                        oldProductPriceElement.style.display = 'block';
                        youSaveAmtElement.style.display = 'block';
                    }
                });
            }

            function @(attributeChangeHandlerFuncName)() {
                $.ajax({
                    cache: false,
                    url: "@Html.Raw(Url.Action("productdetails_attributechange", "shoppingcart", new {productId = productId, validateAttributeConditions = attributesHaveConditions, loadPicture = attributesHaveAssociatedPictures }))",
                    data: $('#product-details-form').serialize(),
                    type: "POST",
                    success: function (data, textStatus, jqXHR) {
                        if (data.price) {
                            $('.price-value-@productId').text(data.price);
                        }
                        if (data.basepricepangv) {
                            $('#base-price-pangv-@productId').text(data.basepricepangv);
                        } else {
                            $('#base-price-pangv-@productId').hide();
                        }
                        if (data.sku) {
                            $('#sku-@productId').text(data.sku).parent(".sku").show();
                        } else {
                            $('#sku-@productId').parent(".sku").hide();
                        }
                        if (data.mpn) {
                            $('#mpn-@productId').text(data.mpn).parent(".manufacturer-part-number").show();
                        } else {
                            $('#mpn-@productId').parent(".manufacturer-part-number").hide();
                        }
                        if (data.gtin) {
                            $('#gtin-@productId').text(data.gtin).parent(".gtin").show();
                        } else {
                            $('#gtin-@productId').parent(".gtin").hide();
                        }
                        if (data.stockAvailability) {
                            $('#stock-availability-value-@productId').text(data.stockAvailability);
                        }
                        if (data.enabledattributemappingids) {
                            for (var i = 0; i < data.enabledattributemappingids.length; i++) {
                                $('#@(NopCatalogDefaults.ProductAttributePrefix)label_' + data.enabledattributemappingids[i]).show();
                                $('#@(NopCatalogDefaults.ProductAttributePrefix)input_' + data.enabledattributemappingids[i]).show();
                            }
                        }
                        if (data.disabledattributemappingids) {
                            for (var i = 0; i < data.disabledattributemappingids.length; i++) {
                                $('#@(NopCatalogDefaults.ProductAttributePrefix)label_' + data.disabledattributemappingids[i]).hide();
                                $('#@(NopCatalogDefaults.ProductAttributePrefix)input_' + data.disabledattributemappingids[i]).hide();
                            }
                        }
                        if (data.pictureDefaultSizeUrl) {
                            $('#main-product-img-@productId').attr("src", data.pictureDefaultSizeUrl);
                        }
                        if (data.pictureFullSizeUrl) {
                            $('#main-product-img-lightbox-anchor-@productId').attr("href", data.pictureFullSizeUrl);
                        }
                        if (data.message) {
                            alert(data.message);
                        }
                        $(document).trigger({ type: "product_attributes_changed", changedData: data });

                        updateSavingsStory();
                    }
                });
            }
            $(document).ready(function() {
                @(attributeChangeHandlerFuncName)();
                @Html.Raw(attributeChangeScriptsBuilder.ToString())
            });
        </script>
    }
}