@model ProductDetailsModel
@using Nop.Core.Domain.Orders
@using Nop.Web.Framework.Infrastructure
@using Nop.Web.Models.Catalog

@* ABC: custom *@
@using Nop.Plugin.Misc.AbcCore.Nop
@inject IAbcProductAttributeService abcProductAttributeService

@if (Model.AddToCart.UpdatedShoppingCartItemId > 0)
{
    <input asp-for="AddToCart.UpdatedShoppingCartItemId" type="hidden" />
}
@if (!Model.AddToCart.DisableBuyButton || Model.AddToCart.CustomerEntersPrice)
{
    if (Model.AddToCart.CustomerEntersPrice)
    {
        <div class="customer-entered-price">
            <div class="price-input">
                <label asp-for="AddToCart.CustomerEnteredPrice" asp-postfix=":" class="enter-price-label"></label>
                <input asp-for="AddToCart.CustomerEnteredPrice" 
                       value="@Convert.ToInt32(Math.Ceiling(Model.AddToCart.CustomerEnteredPrice))" 
                       class="enter-price-input"/>
            </div>
            <div class="price-range">
                @Model.AddToCart.CustomerEnteredPriceRange
            </div>
        </div>
    }
    <div class="add-to-cart">
        @if (!string.IsNullOrEmpty(Model.AddToCart.MinimumQuantityNotification))
        {
            <div class="min-qty-notification">@Model.AddToCart.MinimumQuantityNotification</div>
        }
        @if (!Model.AddToCart.DisableBuyButton || !Model.ProductPrice.CallForPrice)
        {
            <span style="color:red; font-weight:bold;">
                CallForPrice = @Model.ProductPrice.CallForPrice.ToString()
            </span>
            <div class="add-to-cart-panel">
                @{
                    var addToCartText = "";

                    // Delivery options
                    if (await abcProductAttributeService.ProductHasDeliveryOptionsAsync(Model.AddToCart.ProductId))
                    {
                        <button type="button"
                                id="add-to-cart-button-@Model.AddToCart.ProductId"
                                class="button-1 add-to-cart-button"
                                onclick="addCartItemAsync(@Model.AddToCart.ProductId)">
                            <span>Add To Cart</span>
                        </button>
                    }
                    else if (Model.AddToCart.UpdatedShoppingCartItemId > 0 
                             && Model.AddToCart.UpdateShoppingCartItemType.HasValue 
                             && Model.AddToCart.UpdateShoppingCartItemType.Value == ShoppingCartType.ShoppingCart)
                    {
                        addToCartText = T("ShoppingCart.AddToCart.Update").Text;
                        <input type="button" 
                               id="add-to-cart-button-@Model.AddToCart.ProductId" 
                               class="button-1 add-to-cart-button" 
                               value="@addToCartText" 
                               data-productid="@Model.AddToCart.ProductId" 
                               onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.AddToCart.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;" />
                    }
                    else
                    {
                        addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.AddToCart.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.AddToCart.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                        <input type="button" 
                               id="add-to-cart-button-@Model.AddToCart.ProductId" 
                               class="button-1 add-to-cart-button" 
                               value="@addToCartText" 
                               data-productid="@Model.AddToCart.ProductId" 
                               onclick="AjaxCart.addproducttocart_details('@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.AddToCart.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })', '#product-details-form');return false;" />
                    }
                }
            </div>
            @if (!string.IsNullOrEmpty(Model.AddToCart.PreOrderAvailabilityStartDateTimeUserTime))
            {
                <div class="pre-order-availability-date">
                    <label>@T("ShoppingCart.PreOrderAvailability"):</label>
                    <span>@Html.Raw(Model.AddToCart.PreOrderAvailabilityStartDateTimeUserTime)</span>
                </div>
            }
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAddInfo, additionalData = Model.AddToCart })
    </div>
}
