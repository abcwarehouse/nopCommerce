@model ProductDetailsModel.ProductPriceModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@using Nop.Web.Models.Catalog
@using Nop.Services.Catalog
@using Nop.Plugin.Misc.AbcCore.Services
@using Nop.Plugin.Misc.AbcCore.Domain
@using Nop.Plugin.Misc.AbcCore.Extensions
@using Nop.Web.Extensions
@using Nop.Plugin.Misc.AbcCore.Infrastructure
@using Nop.Plugin.Misc.AbcCore.Mattresses
@using Nop.Plugin.Misc.AbcCore.Nop;

@inject IWorkContext workContext
@inject FrontEndService frontEndService
@inject IStoreContext storeContext
@inject IProductService productService
@inject IAbcMattressListingPriceService abcMattressListingPriceService
@inject IWebHelper webHelper
@inject IAbcCategoryService abcCategoryService

@{
    var itemNumber = "";
    var usesPairPricing = false;
    
    bool isHawthorne = frontEndService.StoreIsHawthorne(await storeContext.GetCurrentStoreAsync());

    // Get ABC product information if available
    if (frontEndService.ProductIsAbc(Model.ProductId))
    {
        var pad = frontEndService.GetProductAbcDescriptionByProductId(Model.ProductId);

        if (pad != null)
        {
            itemNumber = pad.AbcItemNumber;
            usesPairPricing = pad.UsesPairPricing;
        }
    }

    // Calculate savings amount if old price exists
    string savedStr = "";
    if (!String.IsNullOrWhiteSpace(Model.OldPrice))
    {
        decimal savedAmt = decimal.Parse(Model.OldPrice.Substring(1)) - decimal.Parse(Model.Price.Substring(1));
        if (savedAmt > 50)
        {
            savedStr = "$" + savedAmt;
        }
    }

    // Get product and category information
    var product = await productService.GetProductByIdAsync(Model.ProductId);
    var productCategories = await abcCategoryService.GetProductCategoriesByProductIdAsync(Model.ProductId);
    bool isClearance = false;
    foreach (var productCategory in productCategories)
    {
        isClearance = await abcCategoryService.IsCategoryIdClearance(productCategory.CategoryId);
        if (isClearance)
        {
            break;
        }
    }

    // Check if product uses cart pricing
    bool usesCartPricing = await product.IsAddToCartAsync() || await product.IsAddToCartWithUserInfoAsync();

    // Get product flag information
    ProductFlag productFlag = frontEndService.GetProductFlag(Model.ProductId);

    string newModelMessage = "";
    string priceBucketCodeImageUrl = "";
    string stockMessage = "";

    if (productFlag != null)
    {
        newModelMessage = productFlag.NewModelMessage;
        priceBucketCodeImageUrl = productFlag.PriceBucketImageUrl;
        stockMessage = productFlag.StockMessage;
    }

    // Get mattress price for schema
    var mattressListingPrice = await abcMattressListingPriceService.GetListingPriceForMattressProductAsync(Model.ProductId);
    var price = mattressListingPrice != null ? mattressListingPrice.ToString() : Model.Price;
}

@if (!Model.CustomerEntersPrice)
{
    if (!usesCartPricing)
    {
        <div class="prices" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
            <link itemprop="availability" href="http://schema.org/InStock" />
            <span style="display: none" itemprop="url">
                this.Request.Url.AbsoluteUri
            </span>
            
            @* Call for price section *@
            @if (Model.CallForPrice)
            {
                <div class="product-price call-for-price">
                    <span>@T("Products.CallForPrice")</span>
                </div>
            }
            else
            {
                <div class="price-container">
                    @* Compare at price (old price) *@
                    @if (!String.IsNullOrWhiteSpace(Model.OldPrice))
                    {
                        <div class="old-price-container">
                            <span class="compare-at">Compare at @Model.OldPrice.Replace(".00", "")</span>
                        </div>
                    }
                    
                    @* Current price and sale information *@
                    <div class="current-price-container">
                        @if (!String.IsNullOrWhiteSpace(savedStr))
                        {
                            <div class="sale-tag">
                                <span class="sale-label">Sale:</span>
                                <span class="price-value">@Html.Raw(Model.Price.Replace(".00", ""))</span>
                            </div>
                            <div class="savings-tag">
                                <span class="save-label">Save</span>
                                <span class="save-amount">@savedStr</span>
                            </div>
                        }
                        else
                        {
                            <div class="price-value">@Html.Raw(Model.Price.Replace(".00", ""))</div>
                        }
                    </div>

                    @* Bonus markdown message *@
                    @if (!String.IsNullOrEmpty(newModelMessage))
                    {
                        <div class="promo-message">@newModelMessage</div>
                    }
                </div>

                @* Open box pricing *@
                @if (productFlag != null && productFlag.IsOpenBox() && !(isClearance))
                {
                    decimal openBoxPrice = 0.0M;
                    openBoxPrice = productFlag.CalculateOpenBoxPrice(Model.PriceValue);
                    <div class="open-box-container">
                        <span class="open-box-text">
                            Open box from <span class="open-box-price">@openBoxPrice.ToString("C").Replace(".00", "")</span>. Available at select locations. 😊
                        </span>
                    </div>
                }

                @* Financing options *@
                <div class="financing-options">
                    <div class="financing-option">
                        <span>$167/mo suggested payments with 6-month special financing.</span>
                        <a href="#" class="learn-how">Learn how</a>
                    </div>
                    <div class="financing-option">
                        <span><strong>Pay Later</strong> from $88/mo for 12 months.</span>
                        <a href="#" class="learn-how">Learn how</a>
                    </div>
                </div>

                @* Clearance message *@
                @if (isClearance)
                {
                    <div class="clearance-message">
                        <span>Available In Store Only</span>
                        <span>Additional discounts based on product condition</span>
                    </div>
                }

                @* Pair pricing disclaimer *@
                @if (usesPairPricing)
                {
                    <div class="pair-pricing-disclaimer">*pair</div>
                }
            }
        </div>
    }

    @* MAP pricing or price bucket image *@
    @if (!string.IsNullOrEmpty(priceBucketCodeImageUrl) && productFlag != null && !productFlag.IsOpenBox())
    {
        <div class="price-bucket-image">
            @if (priceBucketCodeImageUrl.Contains("Map") && !product.DisableBuyButton)
            {
                <span class="map-price-text">Add to cart to see price</span>
                <div class="tooltip-container">
                    <i class="question-icon fas fa-question-circle"></i>
                    <div class="tooltip-content">
                        <h3>Why isn't the price shown here?</h3>
                        <p>Some manufacturers have restrictions on the way prices are displayed on our website.</p>
                        <h3>How do I see the price?</h3>
                        <p>Add the item to your cart. You can always remove it later on.</p>
                    </div>
                </div>
            }
            else
            {
                <img src="@priceBucketCodeImageUrl" alt="Deal Image" />
            }
        </div>
    }

    if (!string.IsNullOrEmpty(stockMessage) && !stockMessage.Equals("Normally ships in 2-3 weeks."))
    {
        <div class="prices-bottom-message">@stockMessage</div>
    }
    if (!string.IsNullOrEmpty(newModelMessage))
    {
        <div class="prices-bottom-message new-model-message">@newModelMessage</div>
    }
    if (!string.IsNullOrEmpty(priceBucketCodeImageUrl) && priceBucketCodeImageUrl.Contains("Map") && !product.DisableBuyButton)
    {
        <div class="map-text">To see our current price, add this item to your cart.</div>
    }
}
