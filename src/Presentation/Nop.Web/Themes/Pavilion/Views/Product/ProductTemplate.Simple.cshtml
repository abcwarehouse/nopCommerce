@model ProductDetailsModel
@using Nop.Core.Domain.Seo
@using Nop.Core.Domain.Catalog
@using Nop.Web.Models.Catalog
@using Nop.Plugin.Misc.AbcCore.Services
@using Nop.Core
@using Nop.Services.Catalog
@using Nop.Plugin.Misc.AbcCore.Domain
@using Nop.Web.Framework.Infrastructure
@using Nop.Plugin.Misc.AbcCore.Infrastructure
@using Nop.Plugin.Misc.AbcFrontend.Extensions
@using Nop.Plugin.Misc.AbcCore.Extensions
@using Nop.Services.Configuration;
@using Nop.Plugin.Misc.AbcCore.Nop;
@using Microsoft.Extensions.Logging;
@using Newtonsoft.Json
@using System.Text.RegularExpressions
@using System.Globalization

@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CatalogSettings catalogSettings
@inject FrontEndService frontEndService
@inject IProductService productService
@inject IStoreContext storeContext
@inject ISettingService _settingService
@inject IProductAttributeService _productAttributeService
@inject IAbcCategoryService abcCategoryService
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page modern-promo-layout");

    var showShareButton = catalogSettings.ShowShareButton;

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
}

<!--product breadcrumb-->
@section Breadcrumb
{
    @Html.Partial("_ProductBreadcrumb", Model.Breadcrumb)
}

@{
    // custom
    Product currentProduct = await productService.GetProductByIdAsync(Model.Id);
    var productCategories = await abcCategoryService.GetProductCategoriesByProductIdAsync(Model.Id);
    var isClearance = false;
    foreach (var productCategory in productCategories)
    {
        isClearance = await abcCategoryService.IsCategoryIdClearance(productCategory.CategoryId);
        if (isClearance)
        {
            break;
        }
    }
    string displayIdStr = "";

    bool productIsAbc = frontEndService.ProductIsAbc(currentProduct.Id);
    ProductAbcDescription abcP = null;
    var productFlag = frontEndService.GetProductFlag(currentProduct.Id);

    if (productIsAbc)
    {
        abcP = frontEndService.GetProductAbcDescriptionByProductId(currentProduct.Id);
        string itemNumber = abcP.AbcItemNumber;
        displayIdStr = itemNumber + (productFlag != null && productFlag.IsSpecialOrder() ? "+" : "");
    }

    // ABC: For some reason I can't get the typed version, so this is from AbcCoreSettings
    var isFedExMode = await _settingService.GetSettingByKeyAsync<bool>("coresettings.isfedexmode");

    ProductAttribute fedExProductAttribute = null;
    var productAttributeMappings = await _productAttributeService.GetProductAttributeMappingsByProductIdAsync(Model.Id);
    foreach (var pam in productAttributeMappings)
    {
        var pa = await _productAttributeService.GetProductAttributeByIdAsync(pam.ProductAttributeId);
        if (pa.Name == "FedEx")
        {
            fedExProductAttribute = pa;
            break;
        }
    }
}

<style>
    .modern-promo-layout {
        font-family: Arial, sans-serif;
        color: #333;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .promo-banner {
        background-color: #f8f8f8;
        border-left: 5px solid #0066cc;
        padding: 15px;
        margin-bottom: 20px;
    }

    .promo-banner h2 {
        color: #0066cc;
        margin: 0;
        font-size: 1.5rem;
    }

    .promo-banner p {
        margin: 5px 0 10px;
        font-size: 1.1rem;
    }

    .promo-button {
        background-color: #0066cc;
        color: white;
        border: none;
        padding: 8px 15px;
        font-weight: bold;
        cursor: pointer;
    }

    .product-header {
        margin-bottom: 15px;
    }

    .product-header h3 {
        color: #0066cc;
        margin: 0 0 10px 0;
        font-size: 1.3rem;
    }

    .manufacturer-stock {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        font-size: 0.9rem;
    }

    .manufacturer {
        font-weight: bold;
    }

    .stock-status, .delivery {
        color: #009933;
        font-weight: bold;
    }

    .product-ratings {
        display: flex;
        align-items: center;
        gap: 15px;
        margin: 15px 0;
    }

    .rating {
        font-weight: bold;
        color: #ff9900;
    }

    .write-review {
        color: #0066cc;
        text-decoration: none;
    }

    .product-name h1 {
        font-size: 1.8rem;
        margin: 0 0 15px 0;
        color: #222;
    }

    .short-description {
        margin-bottom: 20px;
        line-height: 1.5;
    }

    .pricing-section {
        margin: 20px 0;
    }

    .price-row {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 5px;
    }

    .sale-price {
        font-size: 1.5rem;
        font-weight: bold;
        color: #cc0000;
    }

    .compare-price {
        text-decoration: line-through;
        color: #777;
    }

    .savings-row {
        margin-bottom: 15px;
    }

    .save-amount {
        color: #009933;
        font-weight: bold;
    }

    .limited-time-offer, .open-box-option {
        font-weight: bold;
        margin: 10px 0;
        color: #cc0000;
    }

    .financing-options {
        margin: 20px 0;
    }

    .financing-options p {
        margin: 5px 0;
    }

    .special-offers {
        margin: 20px 0;
    }

    .offer-item {
        display: flex;
        align-items: center;
        margin: 10px 0;
    }

    .offer-item input[type="checkbox"] {
        margin-right: 10px;
    }

    .learn-more {
        background: none;
        border: none;
        color: #0066cc;
        text-decoration: underline;
        cursor: pointer;
        padding: 0;
        margin-top: 10px;
        font-weight: bold;
    }

    .promotions {
        margin: 25px 0;
        border-top: 1px solid #eee;
        padding-top: 15px;
    }

    .promotions h4 {
        margin: 0 0 15px 0;
        color: #333;
    }

    .promo-item {
        margin-bottom: 15px;
    }

    .promo-item p {
        margin: 5px 0;
    }

    .add-to-cart-section {
        margin: 30px 0;
    }

    .add-to-cart-btn {
        background-color: #0066cc;
        color: white;
        border: none;
        padding: 15px 30px;
        font-size: 1.1rem;
        font-weight: bold;
        cursor: pointer;
        width: 100%;
        max-width: 300px;
    }

    /* Clearance specific styles */
    .modern-promo-layout .product-price.product-price.product-price span[itemprop="price"] {
        color: #f00;
        text-decoration: line-through;
        font-weight: normal;
    }

    .modern-promo-layout span.clearance-or-less {
        display: inline-block;
        margin-left: 8px;
        font-weight: bold;
        color: #949494;
        text-transform: uppercase;
        font-style: italic;
    }

    .modern-promo-layout .clearance-msg {
        font-size: 1.0rem;
        color: #12659B;
        font-weight: bold;
        margin-right: 7px;
    }

    .modern-promo-layout .clearance-msg-additional {
        font-size: 0.8rem;
        color: #4f4f4f;
    }

    .modern-promo-layout .clearance-msg-block.clearance-msg-block.clearance-msg-block {
        display: block;
    }

    /* Corner picture for clearance */
    .modern-promo-layout .corner-picture img {
        width: 120px;
        height: 120px;
    }

    .modern-promo-layout span.corner-picture {
        display: none;
        z-index: 5;
    }

    .modern-promo-layout .abc-clearance span.corner-picture {
        display: inline;
        position: absolute;
        top: 0;
        right: 0;
        display: inline-block;
    }
</style>

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        <!-- Promo Banner -->
        <div class="promo-banner">
            <h2>Get Approved!</h2>
            <p>Great Credit To No Credit!</p>
            <button class="promo-button">Apply Now</button>
        </div>

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            <div data-productid="@Model.Id">
                <div class="product-essential @(isClearance ? "abc-clearance" : "")">
                    <!-- ABC: for clearance -->
                    @if (isClearance)
                    {
                        <span class="corner-picture"><img src="~/Plugins/Misc.AbcFrontend/Images/clearance_banner.png" alt="Clearance Banner"/></span>
                    }
                    
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    
                    <div class="product-grid">
                        <!-- Product Images Column -->
                        <div class="product-images-column">
                            @{
                                var cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom", additionalData = Model });
                            }
                            @if (!String.IsNullOrEmpty(await cloudZoom.RenderHtmlContentAsync()))
                            {
                                @cloudZoom
                            }
                            else
                            {
                                @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            }
                            @await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.ProductDetailsAfterPictures, additionalData = Model })
                        </div>
                        
                        <!-- Product Info Column -->
                        <div class="product-info-column">
                            <!-- Header with manufacturer and stock status -->
                            <div class="product-header">
                                <h3>We Beat All Deals!</h3>
                                <div class="manufacturer-stock">
                                    @if (Model.ProductManufacturers.Any())
                                    {
                                        <span class="manufacturer">Manufacturer: @Model.ProductManufacturers.First().Name</span>
                                    }
                                    @if (!string.IsNullOrEmpty(displayIdStr))
                                    {
                                        <span class="product-id">@displayIdStr</span>
                                    }
                                    <span class="stock-status">In-Stock! Get It Today!</span>
                                    <span class="delivery">FREE Delivery!</span>
                                </div>
                            </div>

                            <!-- Ratings -->
                            <div class="product-ratings">
                                <div data-bv-show="rating_summary" data-bv-product-id="@currentProduct.Id"></div>
                                <a href="#" class="write-review">Write a Review</a>
                            </div>

                            <!-- Product Name -->
                            <div class="product-name">
                                <h1>@Model.Name</h1>
                            </div>

                            <!-- Short Description -->
                            @if (!string.IsNullOrEmpty(Model.ShortDescription))
                            {
                                <div class="short-description">
                                    @Html.Raw(Model.ShortDescription)
                                </div>
                            }

                            <!-- Price Block -->
                            <div class="pricing-section">
                                @{
                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
                                    @Html.Partial("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                }
                            </div>

                            <!-- Limited Time Offer -->
                            <div class="limited-time-offer">
                                Bonus Markdown Price ENDS on @DateTime.Now.AddDays(7).ToString("M/d/yyyy")
                            </div>

                            <!-- Open Box Option -->
                            <div class="open-box-option">
                                Open box from $848. Available at select locations.
                            </div>

                            <!-- Financing Options -->
                            <div class="financing-options">
                                <p>$297/mo suggested payments with 6-month special financing. <a href="#">Learn how</a></p>
                                <p>Synchrony Pay Later from $58/mo for 12 months. <a href="#">Learn how</a></p>
                            </div>

                            <!-- Special Offers -->
                            <div class="special-offers">
                                <div class="offer-item">
                                    <input type="checkbox" id="trade-in" checked>
                                    <label for="trade-in">TV TRADE-IN</label>
                                </div>
                                <div class="offer-item">
                                    <input type="checkbox" id="credit" checked>
                                    <label for="credit">$500 CREDIT</label>
                                </div>
                                <button class="learn-more">LEARN MORE</button>
                            </div>

                            <!-- Promotions -->
                            <div class="promotions">
                                <h4>Promotions</h4>
                                <div class="promo-item">
                                    <p>ABC WAREHOUSE Bonus Bundle! Ends @DateTime.Now.AddDays(7).ToString("M/d/yyyy")</p>
                                    <p>$300 TV + SOUNDBAR BUNDLE SAVINGS!</p>
                                    <p>Call 800-885-3850 or see store to claim this offer!</p>
                                </div>
                                <div class="promo-item">
                                    <p>Get Free HOME Delivery!*</p>
                                    <p>Free TV Streaming Select Apps*</p>
                                </div>
                            </div>

                            <!-- Product Attributes -->
                            @{
                                var dataDictAttributes = new ViewDataDictionary(ViewData);
                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                            }

                            <!-- Add to Cart -->
                            <div class="add-to-cart-section">
                                @if (!isFedExMode || fedExProductAttribute != null)
                                {
                                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                }
                                
                                @if (isClearance)
                                {
                                    <button class="view-availability" type="button" onclick="location.href='#clearance_stock_widget'">View Availability</button>
                                }
                            </div>

                            <!-- Additional buttons -->
                            <div class="overview-buttons">
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                @{
                                    var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                    dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                }
                                @await Html.PartialAsync("_CompareProductsButton", Model)
                                @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Product Tabs and Additional Info -->
                <div class="product-collateral">
                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                    {
                        <div class="full-description">
                            @Html.Raw(Model.FullDescription)
                        </div>
                    }
                    
                    @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                    
                    <!-- Bazaarvoice Q&A Tab -->
                    <div id="questions_tab" style="display: none;">
                        <div data-bv-show="questions" data-bv-product-id="@currentProduct.Id"></div>
                    </div>
                </div>

                <!-- Related Products -->
                @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>

<!-- Bazaarvoice Script -->
<script>
    window.bvCallback = function (BV) {
        BV.reviews.on('show', function () {
            $('#review_tab').show();
        });

        BV.questions.on('show', function () {
            $('#questions_tab').show();
        });
    };
</script>

<!-- Schema.org JSON-LD -->
@{
    var bvProductUrl = $"{HttpContextAccessor.HttpContext.Request.Scheme}://{HttpContextAccessor.HttpContext.Request.Host}{Url.RouteUrl("Product", new { SeName = Model.SeName })}";
    var productImageUrl = Model.DefaultPictureModel?.ImageUrl;
    
    var schema = new Dictionary<string, object>
    {
        ["@context"] = "https://schema.org",
        ["@type"] = "Product",
        ["@id"] = bvProductUrl,
        ["name"] = Model.Name,
        ["image"] = productImageUrl,
        ["description"] = Regex.Replace(Model.ShortDescription ?? "", "<.*?>", string.Empty),
        ["sku"] = Model.Sku,
        ["brand"] = string.Join(" ", Model.ProductManufacturers.Select(m => m.Name))
    };

    var jsonLd = JsonConvert.SerializeObject(schema, Formatting.Indented);
}




<script type="application/ld+json">
@Html.Raw(jsonLd)
</script>
    <!--BV injected code-->
    <script>
        // Make sure that BV.configure is defined before running this script
        BV.configure('global', {
            events : {
                bvRender : function (data) {
                // JavaScript code that executes when the Bazaarvoice application renders.
                }
            }
        });
    </script>
