@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Seo
@using Nop.Services.Html
@* ABC custom *@
@using Nop.Web.Models.Catalog
@using Nop.Plugin.Misc.AbcCore.Services
@using Nop.Services.Catalog
@using Nop.Plugin.Misc.AbcCore.Domain
@using Nop.Web.Framework.Infrastructure
@using Nop.Plugin.Misc.AbcCore.Infrastructure
@using Nop.Plugin.Misc.AbcFrontend.Extensions
@using Nop.Plugin.Misc.AbcCore.Extensions
@using Nop.Services.Configuration;
@using Nop.Plugin.Misc.AbcCore.Nop;
@using Microsoft.Extensions.Logging;
@using Newtonsoft.Json
@using System.Text.RegularExpressions
@using System.Globalization

@inject CatalogSettings catalogSettings
@inject IHtmlFormatter htmlFormatter
@inject IWebHelper webHelper
@inject SeoSettings seoSettings
@* ABC custom *@
@inject FrontEndService frontEndService
@inject IProductService productService
@inject IStoreContext storeContext
@inject ISettingService _settingService
@inject IProductAttributeService _productAttributeService
@inject IAbcCategoryService abcCategoryService
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-product-details-page");

    var showShareButton = catalogSettings.ShowShareButton;

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl<Product>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(htmlFormatter.StripTags(Model.MetaDescription)) + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        NopHtml.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }
    NopHtml.AddJsonLdParts(Model.JsonLd);
}

<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}

@{
    // custom
    Product currentProduct = await productService.GetProductByIdAsync(Model.Id);
    var productCategories = await abcCategoryService.GetProductCategoriesByProductIdAsync(Model.Id);
    var isClearance = false;
    foreach (var productCategory in productCategories)
    {
        isClearance = await abcCategoryService.IsCategoryIdClearance(productCategory.CategoryId);
        if (isClearance)
        {
            break;
        }
    }
    string displayIdStr = "";

    bool productIsAbc = frontEndService.ProductIsAbc(currentProduct.Id);
    ProductAbcDescription abcP = null;
    var productFlag = frontEndService.GetProductFlag(currentProduct.Id);

    if (productIsAbc)
    {
        abcP = frontEndService.GetProductAbcDescriptionByProductId(currentProduct.Id);
        string itemNumber = abcP.AbcItemNumber;
        displayIdStr = itemNumber + (productFlag != null && productFlag.IsSpecialOrder() ? "+" : "");
    }

    // ABC: For some reason I can't get the typed version, so this is from AbcCoreSettings
    var isFedExMode = await _settingService.GetSettingByKeyAsync<bool>("coresettings.isfedexmode");

    ProductAttribute fedExProductAttribute = null;
    var productAttributeMappings = await _productAttributeService.GetProductAttributeMappingsByProductIdAsync(Model.Id);
    foreach (var pam in productAttributeMappings)
    {
        var pa = await _productAttributeService.GetProductAttributeByIdAsync(pam.ProductAttributeId);
        if (pa.Name == "FedEx")
        {
            fedExProductAttribute = pa;
            break;
        }
    }
}

@if (isClearance)
{
	<style>
		.product-price.product-price.product-price span[itemprop="price"] {
            color: #f00;
            text-decoration: line-through;
            font-weight: normal;
        }

        span.clearance-or-less {
            display: inline-block;
            margin-left: 8px;
            font-weight: bold;
            color: #949494;
            text-transform: uppercase;
            font-style: italic;
        }

        .clearance-msg {
            font-size: 1.0rem;
            color: #12659B;
            font-weight: bold;
            margin-right: 7px;
        }

        .clearance-msg-additional {
            font-size: 0.8rem;
            color: #4f4f4f;
        }

        .clearance-msg-block.clearance-msg-block.clearance-msg-block {
            display: block;
        }
	</style>
}

@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div data-productid="@Model.Id">
                <div class="product-essential">
                    <!-- ABC: for clearance -->
                    <span class="corner-picture"><img src="~/Plugins/Misc.AbcFrontend/Images/clearance_banner.png" alt="Clearance Banner"/></span>
                    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    <div class="gallery">
                        @{
                            var cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom", additionalData = Model });
                        }
                        @if (!String.IsNullOrEmpty(await cloudZoom.RenderHtmlContentAsync()))
                        {
                            @cloudZoom
                            @await Html.PartialAsync("_ProductDetailsVideos", Model)
                        }
                        else
                        {
                            <!--product pictures-->
                            @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            <!--product videos-->
                            @await Html.PartialAsync("_ProductDetailsVideos", Model)
                        }
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.ProductDetailsAfterPictures, additionalData = Model })
                    <div class="overview">
                        @await Html.PartialAsync("_Discontinued", Model)
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                        <!--manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        <div class="product-name">
                            <h1>
                                @Model.Name
                            </h1>
                            <!-- ABC custom -->
                            @if (!string.IsNullOrEmpty(displayIdStr))
                            {
                                <span class="product-name__isam-id">@displayIdStr</span>
                            }
                        </div>
                        <!-- ABC bazaar voice -->
                        <!-- Rating summary goes above the fold near product name or image -->
                        <div data-bv-show="rating_summary" data-bv-product-id="@currentProduct.Id"></div>

                        <div id="questions_tab" style="display: none;">
                            <!-- Instruct BV loader to show the Q&A feature for productID123 here -->
                            <div data-bv-show="questions" data-bv-product-id="@currentProduct.Id"></div>
                        </div>

                        <script>
                            // bvCallback must be used when interacting with BV via JavaScript and using the `async` attribute. 
                            window.bvCallback = function (BV) {

                        // Register a function to be called when a BV feature needs to display the R&R element, such as Rating Summary's stars
                            BV.reviews.on('show', function () {
                                // If the R&R container is hidden (such as behind a tab), put code here to make it visible (open the tab)
                                $('#review_tab').show();
                            });

                        // Register a function to be called when a BV feature needs to 
                        // display the Q&A element, such as when selecting the number of questions link
                            BV.questions.on('show', function () {
                                // If the container is hidden (such as behind a tab), put code here to make it visible (open the tab) 
                                $('#questions_tab').show();
                            });
                            };
                        </script>

                        <!--reviews-->
                        @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        <!--price -->
                        @* ABC moved to bottom
                        @{
                            var dataDictPrice = new ViewDataDictionary(ViewData);
                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceTop, additionalData = Model })
                            @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductPriceBottom, additionalData = Model })
                        } *@
                        <!--rental info-->
                        @{
                            var dataDictRental = new ViewDataDictionary(ViewData);
                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                            @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                        }
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        }
                        <!--SKU, MAN, GTIN, vendor-->
                        @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                        <!--sample download-->
                        @await Html.PartialAsync("_DownloadSample", Model)
                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                            @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)
                        }
                        <!--gift card-->
                        @{
                            var dataDictGiftCard = new ViewDataDictionary(ViewData);
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                            @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        <!--estimate shipping-->
                        @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)
                        <!--availability-->
                        @await Html.PartialAsync("_Availability", Model)
                       
                        <!--price & add to cart-->
                        @{
                            var dataDictPrice = new ViewDataDictionary(ViewData);
                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
                            <div class="product-price-block">
                                @Html.Partial("_ProductPrice", Model.ProductPrice, dataDictPrice)
                            </div>
                        }

                        @await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.ProductDetailsBeforeAddToCart, additionalData = Model })

                        <!--add to cart-->
                        @if (!isFedExMode || fedExProductAttribute != null)
                        {
                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                            @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                        }
                        
                        <!-- ABC clearance -->
                        @if (isClearance)
                        {
                            <button style="color: #446588; border: 2px solid #446588; padding: .4rem 1rem; font-weight: 700; text-transform: uppercase; background-color: #fff;"
                                    type="button"
                                    onclick="location.href='#clearance_stock_widget'">View Availability</button>
                        }
                        <!--wishlist, compare, email a friend-->
                        <div class="overview-buttons">
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                            @{
                                var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                            }
                            @await Html.PartialAsync("_CompareProductsButton", Model)
                            @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                        </div>
                        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                    </div>
                    <div class="overview-bottom">
                        <!--sharing-->
                        @if (showShareButton)
                        {
                            @await Html.PartialAsync("_ShareButton", Model)
                        }
                        <!--delivery-->
                        @await Html.PartialAsync("_DeliveryInfo", Model)
                    </div>
					@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                </div>
                
                @{
                    var nopQuickTabsHtml = await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral", additionalData = Model.Id });
                }

                @if (!String.IsNullOrEmpty(await nopQuickTabsHtml.RenderHtmlContentAsync()))
                {
                    var productsCarouselHtml = await Component.InvokeAsync("Widget", new { widgetZone = "productpage_after_collateral", additionalData = Model.Id });
                    var carouselQuickTabsWrapperClass = "one-column-wrapper";
                    if (!String.IsNullOrEmpty(await productsCarouselHtml.RenderHtmlContentAsync()))
                    {
                        carouselQuickTabsWrapperClass = "two-column-wrapper";
                    }                 
                    <div class="@carouselQuickTabsWrapperClass">
                        @nopQuickTabsHtml @*nop quick tabs*@

                        @productsCarouselHtml @*products carousel for related or also purchased with 1 visible item*@
                    </div>
                }
            </div>
        </form>
        <div class="product-collateral">
            @if (!string.IsNullOrEmpty(Model.FullDescription))
            {
                <div class="full-description">
                    @Html.Raw(Model.FullDescription)
                </div>
            }
            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
            @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
            @*
            ABC: Since we use product tags for InstantSearch, don't display them
            @await Html.PartialAsync("_ProductTags", Model.ProductTags)
            *@
            @if (Model.ProductReviewOverview.AllowCustomerReviews)
            {
                @await Html.PartialAsync("_ProductReviews", Model.ProductReviews)
            }
        </div>
        @await Component.InvokeAsync(typeof(ProductsAlsoPurchasedViewComponent), new { productId = Model.Id })
        @await Component.InvokeAsync(typeof(RelatedProductsViewComponent), new { productId = Model.Id })
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>

@* ABC bazaar voice *@
@{
    var bvProductUrl = $"{HttpContextAccessor.HttpContext.Request.Scheme}://{HttpContextAccessor.HttpContext.Request.Host}{Url.RouteUrl("Product", new { SeName = Model.SeName })}";
    var productImageUrl = Model.DefaultPictureModel?.ImageUrl;
}
@{
    var schema = new Dictionary<string, object>
    {
        ["@context"] = "https://schema.org",
        ["@type"] = "Product",
        ["@id"] = bvProductUrl,
        ["name"] = Model.Name,
        ["image"] = productImageUrl,
        ["description"] = Regex.Replace(Model.ShortDescription ?? "", "<.*?>", string.Empty),
        ["sku"] = Model.Sku,
        ["brand"] = string.Join(" ", Model.ProductManufacturers.Select(m => m.Name))
    };

    var jsonLd = JsonConvert.SerializeObject(schema, Formatting.Indented);
}
<script type="application/ld+json">
@Html.Raw(jsonLd)
</script>
    <!--BV injected code-->
    <script>
        // Make sure that BV.configure is defined before running this script
        BV.configure('global', {
            events : {
                bvRender : function (data) {
                // JavaScript code that executes when the Bazaarvoice application renders.
                }
            }
        });
    </script>
