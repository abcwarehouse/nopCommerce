@model Nop.Web.Models.Catalog.SearchModel

@* custom *@
@using Nop.Plugin.Misc.AbcCore.Nop;
@inject IAbcCategoryService categoryService;
@using Nop.Services.Seo;
@inject ISitemapGenerator sitemapGenerator;
@inject IUrlRecordService urlRecordService;

<div class="search-page-banner">
    <a href="/sale-ad"><img src="/images/SaleAdShop.jpg" alt ="Shop Sale Ad"/></a>
</div>
<div class="search-page-container">
@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Search").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-search-page");

    var searchPageTitle = Model.q;

    if (string.IsNullOrWhiteSpace(searchPageTitle))
    {
        searchPageTitle = T("Search").ToString();
    }

    @* custom *@
    <h1 class="search-page-title">Shop By Category</h1>


    // List of only specific categores to display 
    List<string> parentCategories = new List<string>
            { "Appliances", "TV - Video", "Mattresses", "Furniture", "Car Audio/Video" };

    int x = 0;
    @foreach (var category in parentCategories) 
    {
        var topParentCategory = await categoryService.GetCategoryByNameAsync(parentCategories[x++]);
        if (topParentCategory == null) {
          continue;  
        }
        var childCategories = await categoryService.GetAllCategoriesByParentCategoryIdAsync(topParentCategory.Id);

        <div class="search-category-container">
            <div class="search-content-container">
                @{
                    var categoryUrl = await urlRecordService.GetSeNameAsync(topParentCategory);
                }
                <a href="/@categoryUrl"><h2>@topParentCategory.Name</h2></a>


                <ul class="search-sub-list">
                    
                    @foreach (var subCategory in childCategories)
                    {
                        var subCategoryUrl = await urlRecordService.GetSeNameAsync(subCategory);
                        var firstSubCategory = categoryService.GetCategoryByIdAsync(subCategory.Id);
                        <a href="/@subCategoryUrl"><li>@firstSubCategory.Result.Name</li></a>
                    }
                </ul>
            </div>
        </div>
    }
}
</div>

<script asp-location="Footer">
    $(function() {
        $("#@Html.IdFor(model => model.advs)").on('click', toggleAdvancedSearch);
        toggleAdvancedSearch();
    });

    function toggleAdvancedSearch() {
        if ($('#@Html.IdFor(model => model.advs)').is(':checked')) {
            $('#advanced-search-block').show();
        }
        else {
            $('#advanced-search-block').hide();
        }
    }
</script>

@section CatalogFilters {
    @await Html.PartialAsync("_CatalogFilters", Model.CatalogProductsModel)
}

<div class="page search-page">
    <div class="page-title">
        <h1>@T("Search")</h1>
    </div>
    <div class="page-body">
        <!-- ABC: search input not required -->
        @await Html.PartialAsync("_CatalogSelectors", Model.CatalogProductsModel)
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductSearchPageBeforeResults, additionalData = Model })
        <div class="search-results">
            @{
                var catalogProductsViewData = new ViewDataDictionary(ViewData);
                catalogProductsViewData["fetchUrl"] = Html.Raw(Url.RouteUrl("SearchProducts"));
            }
            @await Html.PartialAsync("_CatalogProducts", Model.CatalogProductsModel, catalogProductsViewData)
            <script asp-location="Footer">
                $(function() {
                    $(CatalogProducts).on('before', function (e) {
                        var isAdvanced = $('#@Html.IdFor(model => model.advs)').is(':checked');

                        e.payload.urlBuilder
                            .addParameter('q', $('#@Html.IdFor(model => model.q)').val())
                            .addParameter('advs', isAdvanced);

                        if (isAdvanced) {
                            e.payload.urlBuilder
                                .addParameter('cid', $('#@Html.IdFor(model => model.cid)').val())
                                .addParameter('isc', $('#@Html.IdFor(model => model.isc)').is(':checked'))
                                .addParameter('mid', $('#@Html.IdFor(model => model.mid)').val())
                                .addParameter('vid', $('#@Html.IdFor(model => model.vid)').val())
                                .addParameter('sid', $('#@Html.IdFor(model => model.sid)').is(':checked'));
                        }
                    });
                });
            </script>
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductSearchPageAfterResults, additionalData = Model })
    </div>
</div>

@section AsidePageTitle
{
    <div class="page-title">
        <h1>@searchPageTitle</h1>
    </div>
}