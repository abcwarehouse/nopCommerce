@model PromoListingModel

@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Nop.Plugin.Misc.AbcCore.Services
@using Microsoft.AspNetCore.Mvc.ViewComponents
@using Nop.Web.Framework.Infrastructure
@using Nop.Web.Extensions
@using Nop.Plugin.Misc.AbcPromos.Models
@using Nop.Plugin.Misc.AbcCore.Infrastructure
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@using Nop.Services.Catalog;

@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@inject IViewComponentSelector viewComponentSelector

@{
    Layout = "_ColumnsTwo";

    // Add the promotion name to the page title
    Html.AddTitleParts(Model.Name);

    // Add a custom CSS class to the page for styling
    Html.AppendPageCssClassParts("html-promo-page");

    // Get the URL path for widget logic
    var path = @Context.Request.Path.Value;
}

<div class="page promo-page">
    <!-- Banner Image -->
    @if (Model.BannerImageUrl != null)
    {
        <p style="text-align: center">
            <a href="@Model.PromoFormPopup">
                <img src="@Model.BannerImageUrl" alt="@Model.Name" width="100%" />
            </a>
        </p>
    }

    <!-- Custom Widget for Specific Path -->
    @if (path.Contains("1966-t-385-cyber-monday-deal"))
    {
        @await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.PromoProductsBelowBanner, additionalData = Model })
    }

    <div class="page-body">
        <!-- Render Rebate and Promo HTML -->
        @if (!string.IsNullOrEmpty(Model.RebatePromoHtml))
        {
            <div class="rebate-promo-section">
                @Html.Raw(Model.RebatePromoHtml)
            </div>
        }

        <!-- Product Filters and Sorting -->
        @if (Model.Products.Count > 0)
        {
            <div class="product-selectors">
                <!-- Mobile Filters Button -->
                <div id="mobile-filters-wrapper">
                    <button id="mobile-filters" onclick="toggleMobileFilters()">
                        <i class="fas fa-filter"></i>Filters
                    </button>
                </div>
            </div>
        }

        <!-- Product Grid -->
        @if (Model.Products.Count > 0)
        {
            <div class="product-grid">
                <div class="item-grid">
                    @foreach (var product in Model.Products)
                    {
                        var index = product.Name.LastIndexOf(' ');
                        string man = "";
                        string manNo = "";
                        if (index < 0)
                        {
                            manNo = product.Name;
                        }
                        else
                        {
                            man = product.Name.Substring(0, index);
                            manNo = product.Name.Substring(index);
                        }
                        <div class="item-box">
                            @Html.Partial("_ProductBox", product)
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Pagination -->
        @{
            var pager = Html.Pager(Model).QueryParam("pagenumber");
        }
        @if (!(await pager.IsEmpty()))
        {
            <div class="pager">
                @pager
            </div>
        }

        <!-- Widget at Bottom of Page -->
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
    </div>
</div>

<!-- Aside Section for Page Title -->
@section AsidePageTitle
{
    <div class="page-title">
        <h1>@Model.Name</h1>
    </div>
}