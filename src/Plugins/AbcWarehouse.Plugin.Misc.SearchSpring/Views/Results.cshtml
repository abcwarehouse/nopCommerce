@model AbcWarehouse.Plugin.Misc.SearchSpring.Models.SearchResultModel
@inject Nop.Services.Catalog.IProductService productService
@inject Nop.Services.Media.IPictureService pictureService
@inject Nop.Services.Localization.ILocalizationService localizationService
@inject Nop.Services.Seo.IUrlRecordService urlRecordService
@inject Nop.Web.Factories.IProductModelFactory productModelFactory
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Nop.Core.IWebHelper webHelper
@using Nop.Web.Models.Catalog
@using Nop.Core.Domain.Catalog
@using Nop.Web.Extensions
@using Nop.Web.Models.Media
@using System.Text.Json
@using System.Web
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities

@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    // Grab current query string parameters as a dictionary (string key -> string value)
    var queryParams = Context.Request.Query.ToDictionary(k => k.Key, v => v.Value.ToString());

    // Current search query param
    var query = Context.Request.Query.ContainsKey("q") ? Context.Request.Query["q"].ToString() : "";

    // Current page param fallback to 1
    var currentPage = Model.PageNumber > 0 ? Model.PageNumber : 1;
}

@if (!Model.Results.Any())
{
    <p>No products found.</p>
}
else
{
    <div class="master-column-wrapper">
        <div class="searchspring-sidebar side-2">
            @foreach (var facet in Model.Facets)
            {
                <div class="searchspring-facet facet">
                    <strong>@facet.Value.Label</strong>
                    <ul>
                        @foreach (var value in facet.Value.Values)
                        {
                            // Clone current params to new dict so we can add/replace filter
                            var allParams = new Dictionary<string, string>(queryParams);

                            var filterKey = $"filter[{facet.Key}]";

                            // Replace or add this filter key with the facet value selected
                            allParams[filterKey] = value.Value;

                            // Rebuild query string with all params
                            var queryString = QueryHelpers.AddQueryString("", allParams);

                            var filterUrl = Url.Content($"/searchspring/results{queryString}");

                            <li>
                                <a href="@filterUrl">@value.Label (@value.Count)</a>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>

        <div class="products-container center-2">
            <div class="products-wrapper">
                <div class="product-grid">
                    <div class="item-grid">
                        @{
                            // Because we are awaiting inside a loop, make this a for loop with Task list or use Razor functions.
                            // To keep it simple, collect results first (blocking call).
                            // NOTE: If you want to optimize, consider preparing product models in controller or service instead.
                            var productModels = new List<dynamic>();

                            foreach (var item in Model.Results)
                            {
                                var product = productService.GetProductBySkuAsync(item.Sku).GetAwaiter().GetResult();
                                if (product != null)
                                {
                                    var productUrl = urlRecordService.GetSeNameAsync(product).GetAwaiter().GetResult();

                                    var productOverviewModels = productModelFactory.PrepareProductOverviewModelsAsync(
                                        new[] { product },
                                        true,
                                        true).GetAwaiter().GetResult();

                                    var model = productOverviewModels.FirstOrDefault();

                                    if (model != null)
                                    {
                                        productModels.Add(model);
                                    }
                                }
                            }

                            foreach (var model in productModels)
                            {
                                <div class="item-box">
                                    @await Html.PartialAsync("_ProductBox", (ProductOverviewModel)model)
                                </div>
                            }
                        }
                    </div>
                </div>

                @if (Model.TotalPages > 1)
                {
                    int maxVisiblePages = 5;
                    int startPage = Math.Max(1, currentPage - maxVisiblePages / 2);
                    int endPage = Math.Min(Model.TotalPages, startPage + maxVisiblePages - 1);

                    if ((endPage - startPage + 1) < maxVisiblePages)
                    {
                        startPage = Math.Max(1, endPage - maxVisiblePages + 1);
                    }

                    <nav class="pagination">
                        <ul>
                            @if (currentPage > 1)
                            {
                                var prevParams = new Dictionary<string, string>(queryParams)
                                {
                                    ["page"] = (currentPage - 1).ToString()
                                };
                                var prevUrl = Url.Content($"/searchspring/results{QueryHelpers.AddQueryString("", prevParams)}");
                                <li>
                                    <a href="@prevUrl">« Prev</a>
                                </li>
                            }

                            @for (var i = startPage; i <= endPage; i++)
                            {
                                var activeClass = i == currentPage ? "active" : "";
                                var pageParams = new Dictionary<string, string>(queryParams)
                                {
                                    ["page"] = i.ToString()
                                };
                                var pageUrl = Url.Content($"/searchspring/results{QueryHelpers.AddQueryString("", pageParams)}");

                                <li class="@activeClass">
                                    <a href="@pageUrl">@i</a>
                                </li>
                            }

                            @if (currentPage < Model.TotalPages)
                            {
                                var nextParams = new Dictionary<string, string>(queryParams)
                                {
                                    ["page"] = (currentPage + 1).ToString()
                                };
                                var nextUrl = Url.Content($"/searchspring/results{QueryHelpers.AddQueryString("", nextParams)}");
                                <li>
                                    <a href="@nextUrl">Next »</a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
}

<style>
    .standard-sidebar {
        display: none;
    }
</style>

<script>
    const searchSpringFacets = @Html.Raw(JsonSerializer.Serialize(
        Model.Facets,
        new JsonSerializerOptions {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        }));

    console.log("Facets:", searchSpringFacets);
</script>

<script>
    document.querySelectorAll('.facet-filter').forEach(button => {
        button.addEventListener('click', () => {
            const field = button.dataset.field;
            const value = button.dataset.value;

            const url = new URL(window.location.href);
            const params = url.searchParams;

            const q = params.get('q') || '';
            params.set('q', q);

            params.append(`filter[${field}]`, value);

            params.set('page', 1);

            const newUrl = `${url.pathname}?${params.toString()}`;

            window.location.href = newUrl;
        });
    });
</script>
