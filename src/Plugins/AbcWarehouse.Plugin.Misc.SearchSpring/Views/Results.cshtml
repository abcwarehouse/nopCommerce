@model AbcWarehouse.Plugin.Misc.SearchSpring.Models.SearchResultModel
@inject Nop.Services.Catalog.IProductService productService
@inject Nop.Services.Media.IPictureService pictureService
@inject Nop.Services.Localization.ILocalizationService localizationService
@inject Nop.Services.Seo.IUrlRecordService urlRecordService
@inject Nop.Web.Factories.IProductModelFactory productModelFactory
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject Nop.Core.IWebHelper webHelper
@using Nop.Web.Models.Catalog
@using Nop.Core.Domain.Catalog
@using Nop.Web.Extensions
@using Nop.Web.Models.Media
@using System.Text.Json
@using System.Web
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities

@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    // Grab current query string parameters as a dictionary (string key -> string value)
    var queryParams = Context.Request.Query.ToDictionary(k => k.Key, v => v.Value.ToString());

    // Current search query param
    var query = Context.Request.Query.ContainsKey("q") ? Context.Request.Query["q"].ToString() : "";

    // Current page param fallback to 1
    var currentPage = Model.PageNumber > 0 ? Model.PageNumber : 1;

}

@if (!Model.Results.Any())
{
    <p>No products found.</p>
}
else
{
    <div class="master-column-wrapper">
        <div class="mobile-filter-wrapper">
            <button id="closeSidebar" class="close-sidebar-btn" aria-label="Close Filters">&times;</button>
            <div class="mobile-sidebar-title"><h2>Filters</h2></div>
            <div class="searchspring-sidebar side-2" id="mobileSidebar">
                @if (Context.Request.Query.Keys.Any(k => k.StartsWith("filter[")))
                {
                    <div class="filter-summary" style="margin-bottom: 20px;">
                        <strong>Active Filters:</strong>
                        <div class="applied-filters" style="margin-top: 10px;">
                            @{
                                var filterParams = Context.Request.Query
                                    .Where(q => q.Key.StartsWith("filter["))
                                    .ToList();

                                foreach (var param in filterParams)
                                {
                                    var fieldLabel = param.Key.Replace("filter[", "").Replace("]", "");
                                    var value = param.Value.ToString();

                                    // Build query string without this filter
                                    var remainingQuery = new List<string>();
                                    foreach (var q in Context.Request.Query)
                                    {
                                        if (q.Key == param.Key) continue;

                                        foreach (var v in q.Value)
                                        {
                                            remainingQuery.Add($"{HttpUtility.UrlEncode(q.Key)}={HttpUtility.UrlEncode(v)}");
                                        }
                                    }

                                    var removeUrl = "/search/results";
                                    if (remainingQuery.Any())
                                        removeUrl += "?" + string.Join("&", remainingQuery);

                                    <div class="remove-button" style="display: inline-block; margin-right: 10px;">
                                        <a href="@removeUrl" style="color: text-decoration: none;">
                                            <i class="fa fa-times" aria-hidden="true"></i>
                                            <span><b>X</b> @value</span>
                                        </a>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }
                
@foreach (var facet in Model.Facets)
{
    <div class="searchspring-facet facet">
        <strong>@facet.Value.Label</strong>
        
        @if (facet.Key == "brand") 
        {
            <div class="brand-search-container">
                <input type="text" class="brand-search" placeholder="Search" id="brandSearchInput">
            </div>
        }
        
        <ul class="@(facet.Key == "brand" ? "brand-list" : "")">
            @foreach (var value in facet.Value.Values)
            {
                var allParams = new Dictionary<string, string>(queryParams);
                var filterKey = $"filter[{facet.Key}]";
                allParams[filterKey] = value.Value;
                var queryString = QueryHelpers.AddQueryString("", allParams);
                var filterUrl = Url.Content($"/search/results{queryString}");

                <li data-brand-name="@value.Label.ToLower()">
                    <a href="@filterUrl">@value.Label (@value.Count)</a>
                </li>
            }
        </ul>
    </div>
}

            </div>
        </div>

        <div class="products-container center-2">
    <!-- Desktop version -->
    <div class="desktop-version-search">
        <div class="searchspring-top-bar">
            <div class="search-query">Search for "@query" (@Model.TotalResults)</div>
            <form method="get">
                <input type="hidden" name="q" value="@Model.Query" />
                <select name="sort" id="searchspring-sort" onchange="this.form.submit()">
                    @foreach (var option in Model.SortOptions)
                    {
                        var sortValue = $"{option.Field}_{option.Direction}";
                        var isSelected = Context.Request.Query["sort"] == sortValue ? "selected=\"selected\"" : "";
                        var label = option.Label;

                        @Html.Raw($"<option value=\"{sortValue}\" {isSelected}>{label}</option>")
                    }
                </select>
            </form>
            <button id="filterToggle" class="mobile-filter-btn">Filters</button>
        </div>
    </div>

    <!-- Mobile version  -->
    <div class="mobile-version-search">
        <div class="search-query">Search for "@query" (@Model.TotalResults)</div>
        <div class="searchspring-top-bar">
            <form method="get" id="searchspring-sort-form">
                <input type="hidden" name="q" value="@Model.Query" />
                <select name="sort" id="searchspring-sort">
                    @foreach (var option in Model.SortOptions)
                    {
                        var sortValue = $"{option.Field}_{option.Direction}";
                        var isSelected = Context.Request.Query["sort"] == sortValue ? "selected=\"selected\"" : "";
                        var label = option.Label;

                        @Html.Raw($"<option value=\"{sortValue}\" {isSelected}>{label}</option>")
                    }
                </select>
            </form>
            
            <button id="filterToggle" class="mobile-filter-btn">Filters</button>
        </div>

        @{
            List<string> headerBanners = null;
        }
        </div>

        @if (Model.BannersByPosition != null && Model.BannersByPosition.TryGetValue("header", out headerBanners))
        {
            <div class="searchspring-banner header-banner">
                @foreach (var html in headerBanners)
                {
                    @Html.Raw(html)
                }
            </div>
        }
    
    
    
    <div class="products-wrapper">

        @* Add this section right after your search query display and before the products grid *@

        @* DIAGNOSTIC BANNER INFO - Remove after debugging *@
        <div style="background: #f0f0f0; border: 2px solid #ff0000; padding: 15px; margin: 20px 0;">
            <h3 style="color: #ff0000;">DIAGNOSTIC INFO (Remove after debugging)</h3>
            
            <div style="margin: 10px 0;">
                <strong>Query Parameters:</strong>
                <ul>
                    <li>Query: @Model.Query</li>
                    <li>Page: @Model.PageNumber</li>
                    <li>Lat: @Context.Request.Query["lat"]</li>
                    <li>Lng: @Context.Request.Query["lng"]</li>
                </ul>
            </div>
            
            <div style="margin: 10px 0;">
                <strong>Banner Positions Available:</strong>
                @if (Model.BannersByPosition != null && Model.BannersByPosition.Any())
                {
                    <ul>
                        @foreach (var position in Model.BannersByPosition)
                        {
                            <li>
                                <strong>@position.Key:</strong> @position.Value.Count banner(s)
                                <ul>
                                    @foreach (var banner in position.Value)
                                    {
                                        var preview = banner.Length > 200 ? banner.Substring(0, 200) + "..." : banner;
                                        <li style="font-family: monospace; font-size: 11px;">@preview</li>
                                    }
                                </ul>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p style="color: #ff0000; font-weight: bold;">NO BANNERS FOUND IN MODEL!</p>
                }
            </div>
            
            <div style="margin: 10px 0;">
                <strong>Current Filters:</strong>
                @if (Context.Request.Query.Keys.Any(k => k.StartsWith("filter[")))
                {
                    <ul>
                        @foreach (var key in Context.Request.Query.Keys.Where(k => k.StartsWith("filter[")))
                        {
                            <li>@key = @Context.Request.Query[key]</li>
                        }
                    </ul>
                }
                else
                {
                    <p>No filters applied</p>
                }
            </div>
        </div>


        <div class="product-grid">
            <div class="item-grid">
                @{
                    var productModels = new List<dynamic>();

                    foreach (var item in Model.Results)
                    {
                        var product = productService.GetProductBySkuAsync(item.Sku).GetAwaiter().GetResult();
                        if (product == null)
                        {
                            product = productService.GetProductBySkuAsync("+" + item.Sku).GetAwaiter().GetResult();
                        }
                        if (product != null)
                        {
                            var productUrl = urlRecordService.GetSeNameAsync(product).GetAwaiter().GetResult();

                            var productOverviewModels = productModelFactory.PrepareProductOverviewModelsAsync(
                                new[] { product },
                                true,
                                true).GetAwaiter().GetResult();

                            var model = productOverviewModels.FirstOrDefault();

                            if (model != null)
                            {
                                productModels.Add(model);
                            }
                        }
                    }

                    foreach (var model in productModels)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", (ProductOverviewModel)model)
                        </div>
                    }
                }
            </div>
        </div>

        @if (Model.TotalPages > 1)
        {
            int maxVisiblePages = 5;
            int startPage = Math.Max(1, currentPage - maxVisiblePages / 2);
            int endPage = Math.Min(Model.TotalPages, startPage + maxVisiblePages - 1);

            if ((endPage - startPage + 1) < maxVisiblePages)
            {
                startPage = Math.Max(1, endPage - maxVisiblePages + 1);
            }

            <nav class="pagination">
                <ul>
                    @if (currentPage > 1)
                    {
                        var prevParams = new Dictionary<string, string>(queryParams)
                        {
                            ["page"] = (currentPage - 1).ToString()
                        };
                        var prevUrl = Url.Content($"/search/results{QueryHelpers.AddQueryString("", prevParams)}");
                        <li>
                            <a href="@prevUrl">« Prev</a>
                        </li>
                    }

                    @for (var i = startPage; i <= endPage; i++)
                    {
                        var activeClass = i == currentPage ? "active" : "";
                        var pageParams = new Dictionary<string, string>(queryParams)
                        {
                            ["page"] = i.ToString()
                        };
                        var pageUrl = Url.Content($"/search/results{QueryHelpers.AddQueryString("", pageParams)}");

                        <li class="@activeClass">
                            <a href="@pageUrl">@i</a>
                        </li>
                    }

                    @if (currentPage < Model.TotalPages)
                    {
                        var nextParams = new Dictionary<string, string>(queryParams)
                        {
                            ["page"] = (currentPage + 1).ToString()
                        };
                        var nextUrl = Url.Content($"/search/results{QueryHelpers.AddQueryString("", nextParams)}");
                        <li>
                            <a href="@nextUrl">Next »</a>
                        </li>
                    }
                </ul>
            </nav>
        }
    </div>
</div>

    </div>
}

<style>
    .standard-sidebar {
        display: none;
    }
    .searchspring-banner.header-banner {
        margin-bottom: 20px;
    }

    .searchspring-banner.main-banner {
        margin: 20px 0;
    }

    .searchspring-banner.left-banner {
        float: left;
        margin-right: 20px;
    }

    .searchspring-banner.footer-banner {
        margin-top: 30px;
    }

</style>

<script>
    const searchSpringFacets = @Html.Raw(JsonSerializer.Serialize(
        Model.Facets,
        new JsonSerializerOptions {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        }));

    console.log("Facets:", searchSpringFacets);
</script>

<script>
    document.querySelectorAll('.facet-filter').forEach(button => {
        button.addEventListener('click', () => {
            const field = button.dataset.field;
            const value = button.dataset.value;

            const url = new URL(window.location.href);
            const params = url.searchParams;

            const q = params.get('q') || '';
            params.set('q', q);

            params.append(`filter[${field}]`, value);

            params.set('page', 1);

            const newUrl = `${url.pathname}?${params.toString()}`;

            window.location.href = newUrl;
        });
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const toggleBtn = document.getElementById("filterToggle");
        const closeBtn = document.getElementById("closeSidebar");
        const sidebar = document.querySelector(".mobile-filter-wrapper");

        toggleBtn.addEventListener("click", function () {
            sidebar.classList.toggle("active");
        });

        closeBtn.addEventListener("click", function () {
            sidebar.classList.remove("active");
        });
    });

</script>
<script>
document.addEventListener("DOMContentLoaded", function () {
    console.log("=== GEOLOCATION DEBUG START ===");
    
    // Check if geolocation is available
    if (!navigator.geolocation) {
        console.error("Geolocation is NOT supported by this browser");
        alert("Your browser doesn't support geolocation");
    } else {
        console.log("Geolocation IS supported");
    }
    
    console.log("Testing geolocation access...");
    navigator.geolocation.getCurrentPosition(
        function(position) {
            console.log("✓ Geolocation SUCCESS!");
            console.log("Latitude:", position.coords.latitude);
            console.log("Longitude:", position.coords.longitude);
            console.log("Accuracy:", position.coords.accuracy);
        },
        function(error) {
            console.error("✗ Geolocation FAILED!");
            console.error("Error code:", error.code);
            console.error("Error message:", error.message);
            
            switch(error.code) {
                case error.PERMISSION_DENIED:
                    alert("Location permission denied. Please enable location access in your browser settings.");
                    break;
                case error.POSITION_UNAVAILABLE:
                    alert("Location information unavailable.");
                    break;
                case error.TIMEOUT:
                    alert("Location request timed out.");
                    break;
            }
        },
        {
            enableHighAccuracy: false,
            timeout: 10000,
            maximumAge: 300000
        }
    );
    
    const currentQuery = "@Model.Query";
    const currentSort = new URLSearchParams(window.location.search).get('sort') || '';
    
    // Check if we already have geo params
    const urlParams = new URLSearchParams(window.location.search);
    const hasGeoParams = urlParams.has('lat') && urlParams.has('lng');
    console.log("Current URL has geo params:", hasGeoParams);
    if (hasGeoParams) {
        console.log("Current lat:", urlParams.get('lat'));
        console.log("Current lng:", urlParams.get('lng'));
    }
    
    // Function to get current filters from URL
    function getCurrentFilters() {
        const params = new URLSearchParams(window.location.search);
        const filters = [];
        for (const [key, value] of params.entries()) {
            if (key.startsWith('filter[')) {
                filters.push(`${key}=${encodeURIComponent(value)}`);
            }
        }
        return filters.join('&');
    }
    
    function runGeoSearchWithFilters(query, page = 1, sort = null, additionalFilters = '') {
        console.log("=== runGeoSearchWithFilters called ===");
        console.log("Query:", query);
        console.log("Page:", page);
        console.log("Sort:", sort);
        console.log("Filters:", additionalFilters);
        
        if (navigator.geolocation) {
            console.log("Requesting geolocation...");
            
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    
                    console.log("✓ Got coordinates!");
                    console.log("Lat:", lat);
                    console.log("Lng:", lng);
                    
                    let url = `/search/results?q=${encodeURIComponent(query)}&page=${page}&lat=${lat}&lng=${lng}`;
                    if (sort) url += `&sort=${encodeURIComponent(sort)}`;
                    if (additionalFilters) url += `&${additionalFilters}`;
                    
                    console.log("Redirecting to:", url);
                    window.location.href = url;
                },
                function(error) {
                    console.error("✗ Geolocation failed in search");
                    console.error("Error code:", error.code);
                    console.error("Error message:", error.message);
                    
                    let url = `/search/results?q=${encodeURIComponent(query)}&page=${page}`;
                    if (sort) url += `&sort=${encodeURIComponent(sort)}`;
                    if (additionalFilters) url += `&${additionalFilters}`;
                    
                    console.log("Fallback redirect to:", url);
                    window.location.href = url;
                },
                {
                    enableHighAccuracy: false,
                    timeout: 10000, // 10 seconds
                    maximumAge: 300000 // 5 minutes cache
                }
            );
        } else {
            console.error("Browser doesn't support geolocation");
            // Browser doesn't support geolocation
            let url = `/search/results?q=${encodeURIComponent(query)}&page=${page}`;
            if (sort) url += `&sort=${encodeURIComponent(sort)}`;
            if (additionalFilters) url += `&${additionalFilters}`;
            
            console.log("No geolocation redirect to:", url);
            window.location.href = url;
        }
    }
    
    const paginationLinks = document.querySelectorAll('.pagination a');
    console.log("Found", paginationLinks.length, "pagination links");
    paginationLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            console.log("Pagination link clicked:", this.href);
            const url = new URL(this.href);
            const page = url.searchParams.get('page') || 1;
            const filters = getCurrentFilters();
            runGeoSearchWithFilters(currentQuery, page, currentSort, filters);
        });
    });
    
    const filterLinks = document.querySelectorAll('.searchspring-facet a');
    console.log("Found", filterLinks.length, "filter links");
    filterLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            console.log("Filter link clicked:", this.href);
            const url = new URL(this.href);
            const params = new URLSearchParams(url.search);
            
            const filters = [];
            for (const [key, value] of params.entries()) {
                if (key.startsWith('filter[')) {
                    filters.push(`${key}=${encodeURIComponent(value)}`);
                }
            }
            
            runGeoSearchWithFilters(currentQuery, 1, currentSort, filters.join('&'));
        });
    });
    
    const sortDropdown = document.getElementById('searchspring-sort');
    if (sortDropdown) {
        console.log("Sort dropdown found");
        // Remove any existing onchange
        sortDropdown.onchange = null;
        sortDropdown.removeAttribute('onchange');
        
        sortDropdown.addEventListener('change', function(e) {
            e.preventDefault();
            console.log("Sort changed to:", this.value);
            const sortValue = this.value;
            const filters = getCurrentFilters();
            runGeoSearchWithFilters(currentQuery, 1, sortValue, filters);
        });
    } else {
        console.log("Sort dropdown NOT found");
    }
    
    const removeLinks = document.querySelectorAll('.remove-button a');
    console.log("Found", removeLinks.length, "remove filter links");
    removeLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            console.log("Remove filter clicked:", this.href);
            const url = new URL(this.href, window.location.origin);
            const params = new URLSearchParams(url.search);
            
            const filters = [];
            for (const [key, value] of params.entries()) {
                if (key.startsWith('filter[')) {
                    filters.push(`${key}=${encodeURIComponent(value)}`);
                }
            }
            
            runGeoSearchWithFilters(currentQuery, 1, currentSort, filters.join('&'));
        });
    });
    
    if (!hasGeoParams) {
        console.log("No geo params in URL, triggering initial geolocation...");
        const currentPage = parseInt(urlParams.get('page')) || 1;
        const filters = getCurrentFilters();
        
        // Give the page a moment to fully load
        setTimeout(function() {
            runGeoSearchWithFilters(currentQuery, currentPage, currentSort, filters);
        }, 500);
    } else {
        console.log("Geo params already present, skipping auto-trigger");
    }
    
    console.log("=== GEOLOCATION DEBUG END ===");
});
</script>
