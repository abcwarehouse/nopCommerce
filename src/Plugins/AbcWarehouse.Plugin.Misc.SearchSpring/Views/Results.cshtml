@model AbcWarehouse.Plugin.Misc.SearchSpring.Models.SearchResultModel
@inject Nop.Services.Catalog.IProductService productService
@inject Nop.Services.Media.IPictureService pictureService
@inject Nop.Services.Localization.ILocalizationService localizationService
@inject Nop.Services.Seo.IUrlRecordService urlRecordService
@inject Nop.Web.Factories.IProductModelFactory productModelFactory
@inject Nop.Core.IWebHelper webHelper
@using Nop.Web.Models.Catalog
@using Nop.Core.Domain.Catalog
@using Nop.Web.Extensions
@using Nop.Web.Models.Media
@using System.Text.Json

@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";
}

@if (!Model.Results.Any())
{
    <p>No products found.</p>
}
else
{
    <div class="searchspring-sidebar">
        @foreach (var facetEntry in Model.Facets)
        {
            var facetName = facetEntry.Key;
            var facetDetail = facetEntry.Value;

            <div class="searchspring-facet">
                <h3>@facetDetail.Label</h3>  @* Use Label property for display name *@
                <ul>
                    @foreach (var facetValue in facetDetail.Values)
                    {
                        <li>
                            <a href="@($"{webHelper.GetStoreLocation()}searchspring/results?q={Model.Query}&facet={facetName}:{facetValue.Value}")">
                                @facetValue.Label (@facetValue.Count)
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>

    <div class="products-container">
        <div class="products-wrapper">
            <div class="product-grid">
                <div class="item-grid">
                    @{

                        foreach (var item in Model.Results)
                        {
                            var product = await productService.GetProductBySkuAsync(item.Sku);
                            if (product != null)
                            {
                                var productUrl = await urlRecordService.GetSeNameAsync(product);

                                var productOverviewModels = await productModelFactory.PrepareProductOverviewModelsAsync(
                                    new[] { product },
                                    true,
                                    true);

                                var model = productOverviewModels.FirstOrDefault();

                                if (model != null)
                                {
                                    <div class="item-box">
                                        @await Html.PartialAsync("_ProductBox", model)
                                    </div>
                                }
                            }
                        }

                    }
                </div>
            </div>
            @if (Model.TotalPages > 1)
                {
                    int maxVisiblePages = 5;
                    int currentPage = Model.PageNumber;
                    int startPage = Math.Max(1, currentPage - maxVisiblePages / 2);
                    int endPage = Math.Min(Model.TotalPages, startPage + maxVisiblePages - 1);

                    // Adjust startPage if we're near the end
                    if ((endPage - startPage + 1) < maxVisiblePages)
                    {
                        startPage = Math.Max(1, endPage - maxVisiblePages + 1);
                    }

                    <nav class="pagination">
                        <ul>
                            @if (currentPage > 1)
                            {
                                <li>
                                    <a href="/searchspring/results?q=@Model.Query&page=@(currentPage - 1)">« Prev</a>
                                </li>
                            }

                            @for (var i = startPage; i <= endPage; i++)
                            {
                                var activeClass = i == currentPage ? "active" : "";
                                <li class="@activeClass">
                                    <a href="/searchspring/results?q=@Model.Query&page=@i">@i</a>
                                </li>
                            }

                            @if (currentPage < Model.TotalPages)
                            {
                                <li>
                                    <a href="/searchspring/results?q=@Model.Query&page=@(currentPage + 1)">Next »</a>
                                </li>
                            }
                        </ul>
                    </nav>
                }

        </div>
    </div>
}

<script>
    // Serialize the model as JSON and safely encode for JS
    const searchSpringModel = @Html.Raw(JsonSerializer.Serialize(Model, new JsonSerializerOptions {
        WriteIndented = true,
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    }));

    console.log("SearchSpringModel:", searchSpringModel);
</script>