@using Nop.Web.Framework
@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Web.Framework.Infrastructure

@inject IWebHelper webHelper

@{
    var storeUrl = webHelper.GetStoreLocation(); 
    var searchBaseUrl = $"{storeUrl}searchspring/results?q=";
}

<script src="https://cdn.searchspring.net/intellisuggest/is.min.js" async defer></script>

<div class="search-container" style="position: relative;">
    <form id="searchForm" autocomplete="off">
        <input type="text" id="searchInput" placeholder="Type to search..." />
        <button type="submit">Search</button>
    </form>
    <div id="autocomplete-results" class="autocomplete-list"></div>
</div>

<style>
    .autocomplete-list {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ccc;
        z-index: 999;
        max-height: 200px;
        overflow-y: auto;
        display: none;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1); /* Added for better visibility */
    }

    .suggestion-item {
        padding: 8px 10px;
        cursor: pointer;
    }

    .suggestion-item:hover {
        background-color: #f0f0f0;
    }
</style>

<script>
    const input = document.getElementById('searchInput');
    const resultsContainer = document.getElementById('autocomplete-results');
    const baseUrl = '@searchBaseUrl';

    window.searchspringTracking = {
        userId: null,
        sessionId: null
    };

    let intellisuggestIsReady = false;

    document.addEventListener('intellisuggest-ready', function () {
        const trackingParams = window.intellisuggest?.getTrackingParams?.();
        if (trackingParams?.userId && trackingParams?.sessionId) {
            window.searchspringTracking.userId = trackingParams.userId;
            window.searchspringTracking.sessionId = trackingParams.sessionId;
            intellisuggestIsReady = true; // Set flag
            console.log("✅ Searchspring tracking ready:", window.searchspringTracking);
        } else {
            console.warn("⚠️ Tracking params missing after intellisuggest-ready event.");
        }
    });

    input.addEventListener('input', async function () {
        const query = input.value.trim();
        if (query.length < 2) {
            resultsContainer.innerHTML = '';
            resultsContainer.style.display = 'none';
            return;
        }

        let userId = window.searchspringTracking.userId;
        let sessionId = window.searchspringTracking.sessionId;

        const suggestUrl = `/searchspring/suggest?q=${encodeURIComponent(query)}${userId && sessionId ? `&userId=${userId}&sessionId=${sessionId}` : ''}`;
        const autocompleteUrl = `/searchspring/autocomplete?q=${encodeURIComponent(query)}${userId && sessionId ? `&userId=${userId}&sessionId=${sessionId}` : ''}`;

        try {
            const [suggestRes, autoRes] = await Promise.all([
                fetch(suggestUrl),
                fetch(autocompleteUrl)
            ]);

            const suggestData = suggestRes.ok ? await suggestRes.json() : null;
            const autocompleteData = autoRes.ok ? await autoRes.json() : null;

            const suggestions = suggestData?.suggestions || [];
            const autocompleteItems = autocompleteData?.results?.[0]?.suggestions || [];

            resultsContainer.innerHTML = '';

            if (suggestions.length > 0) {
                const suggestHeader = document.createElement('div');
                suggestHeader.textContent = 'Suggested Searches';
                suggestHeader.style.fontWeight = 'bold';
                suggestHeader.style.padding = '4px 10px';
                resultsContainer.appendChild(suggestHeader);

                suggestions.forEach(s => {
                    const item = document.createElement('div');
                    item.classList.add('suggestion-item');
                    item.textContent = s.value;
                    item.addEventListener('click', () => {
                        input.value = s.value;
                        window.location.href = baseUrl + encodeURIComponent(s.value);
                    });
                    resultsContainer.appendChild(item);
                });
            }

            if (autocompleteItems.length > 0) {
                const autoHeader = document.createElement('div');
                autoHeader.textContent = 'Autocomplete Results';
                autoHeader.style.fontWeight = 'bold';
                autoHeader.style.padding = '4px 10px';
                resultsContainer.appendChild(autoHeader);

                autocompleteItems.forEach(itemData => {
                    const item = document.createElement('div');
                    item.classList.add('suggestion-item');
                    item.textContent = itemData.value;
                    item.addEventListener('click', () => {
                        input.value = itemData.value;
                        window.location.href = baseUrl + encodeURIComponent(itemData.value);
                    });
                    resultsContainer.appendChild(item);
                });
            }

            resultsContainer.style.display = (suggestions.length > 0 || autocompleteItems.length > 0) ? 'block' : 'none';

        } catch (err) {
            console.error("❌ Failed to fetch autocomplete/suggest results:", err);
            resultsContainer.style.display = 'none';
        }
    });


    // Handle search form submission
    document.getElementById('searchForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const query = input.value.trim();
        if (query) {
            window.location.href = baseUrl + encodeURIComponent(query);
        }
    });

    // Hide suggestions when clicking outside
    document.addEventListener('click', function (event) {
        // Check if the click was outside the search container and not on the input itself
        if (!event.target.closest('.search-container') && event.target !== input) {
            resultsContainer.style.display = 'none';
        }
    });

    input.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            resultsContainer.style.display = 'none';
            input.blur(); // Remove focus from input
        }
    });

</script>