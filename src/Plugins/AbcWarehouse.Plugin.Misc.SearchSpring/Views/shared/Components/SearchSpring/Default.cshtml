@using Nop.Web.Framework
@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Web.Framework.Infrastructure

@inject IWebHelper webHelper

@{
    var storeUrl = webHelper.GetStoreLocation(); 
    var searchBaseUrl = $"{storeUrl}searchspring/results?q=";
}

<script src="https://cdn.searchspring.net/intellisuggest/is.min.js" async defer></script>

<div class="search-container" style="position: relative;">
    <form id="searchForm" autocomplete="off">
        <input type="text" id="searchInput" placeholder="Type to search..." />
        <button type="submit">Search</button>
    </form>
    <div id="autocomplete-results" class="autocomplete-list"></div>
</div>

<style>
    .autocomplete-list {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ccc;
        z-index: 999;
        max-height: 200px;
        overflow-y: auto;
        display: none;
        box-shadow: 0 4px 8px rgba[0](0,0,0,0.1);
    }

    .suggestion-item {
        padding: 8px 10px;
        cursor: pointer;
    }

    .suggestion-item:hover {
        background-color: #f0f0f0;
    }
</style>

<script>
    const input = document.getElementById('searchInput');
    const resultsContainer = document.getElementById('autocomplete-results');
    const baseUrl = '@searchBaseUrl';

    window.searchspringTracking = {
        userId: null,
        sessionId: null
    };

    let intellisuggestIsReady = false;

    // Wait for IntelliSuggest to be ready
    document.addEventListener('intellisuggest-ready', function () {
        const trackingParams = window.intellisuggest?.getTrackingParams?.();
        if (trackingParams?.userId && trackingParams?.sessionId) {
            window.searchspringTracking.userId = trackingParams.userId;
            window.searchspringTracking.sessionId = trackingParams.sessionId;
            intellisuggestIsReady = true; // Set flag
            console.log("✅ Searchspring tracking ready:", window.searchspringTracking);
        } else {
            console.warn("⚠️ Tracking params missing after intellisuggest-ready event.");
        }
    });

    // Function to handle the actual suggestion fetch
    async function fetchSuggestions(query) {
        if (!intellisuggestIsReady) {
            console.warn("⚠️ IntelliSuggest not ready yet. Cannot fetch suggestions with tracking IDs.");
            resultsContainer.innerHTML = '';
            resultsContainer.style.display = 'none';
            return;
        }

        const userId = window.searchspringTracking.userId;
        const sessionId = window.searchspringTracking.sessionId;

        if (!userId || !sessionId) {
             console.error("❌ Critical: userId or sessionId are null/undefined even after intellisuggest-ready. This should not happen.");
             resultsContainer.innerHTML = '';
             resultsContainer.style.display = 'none';
             return;
        }

        try {
            const suggestUrl = `/searchspring/suggest?q=${encodeURIComponent(query)}&userId=${encodeURIComponent(userId)}&sessionId=${encodeURIComponent(sessionId)}`;
            
            console.log("Fetching suggestions from:", suggestUrl); // Debugging: Check the full URL being sent

            const res = await fetch(suggestUrl);

            if (!res.ok) {
                console.error("❌ Suggest API error:", await res.text());
                resultsContainer.style.display = 'none';
                return;
            }

            const data = await res.json();
            const suggestions = data?.suggestions || [];

            resultsContainer.innerHTML = '';
            if (suggestions.length > 0) {
                suggestions.forEach(s => {
                    const item = document.createElement('div');
                    item.classList.add('suggestion-item');
                    item.textContent = s.value;
                    item.addEventListener('click', () => {
                        input.value = s.value;
                        window.location.href = baseUrl + encodeURIComponent(s.value);
                    });
                    resultsContainer.appendChild(item);
                });
                resultsContainer.style.display = 'block';
            } else {
                resultsContainer.style.display = 'none';
            }
        } catch (err) {
            console.error("❌ Suggest fetch failed:", err);
            resultsContainer.style.display = 'none';
        }
    }

    // Watch input changes
    input.addEventListener('input', function () {
        const query = input.value.trim();
        if (query.length < 2) {
            resultsContainer.innerHTML = '';
            resultsContainer.style.display = 'none';
            return;
        }

        // Call the fetch function only if IntelliSuggest is ready
        fetchSuggestions(query);
    });

    // Handle search form submission
    document.getElementById('searchForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const query = input.value.trim();
        if (query) {
            window.location.href = baseUrl + encodeURIComponent(query);
        }
    });

    // Hide suggestions when clicking outside
    document.addEventListener('click', function (event) {
        if (!event.target.closest('.search-container') && event.target !== input) {
            resultsContainer.style.display = 'none';
        }
    });

    input.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            resultsContainer.style.display = 'none';
            input.blur();
        }
    });
</script>