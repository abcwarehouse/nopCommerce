@using Nop.Web.Framework
@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Web.Framework.Infrastructure

@inject IWebHelper webHelper

@{
    var storeUrl = webHelper.GetStoreLocation(); 
    var searchBaseUrl = $"{storeUrl}searchspring/results?q=";
}

<script src="https://cdn.searchspring.net/intellisuggest/is.min.js" async defer></script>

<div class="search-container" style="position: relative; max-width: 320px;">
    <form id="searchForm" autocomplete="off" style="display:flex;">
        <input type="text" id="searchInput" placeholder="What can we help you find?" style="flex:1; padding:6px;" />
        <button type="submit" style="padding:6px 10px;"><i class="fas fa-search"></i></button>
    </form>
    <ul id="autocomplete-results" class="autocomplete-list" style="display:none;"></ul>
</div>

<script>
  function updateZeroPrices() {
    document.querySelectorAll('.price').forEach(el => {
      if (el.textContent.trim() === '0.00') {
        el.textContent = 'Call for price';
      }
    });
  }
  updateZeroPrices();
  const observer = new MutationObserver(updateZeroPrices);
  observer.observe(document.body, { childList: true, subtree: true });

  const input = document.getElementById('searchInput');
  const resultsContainer = document.getElementById('autocomplete-results');
  const baseUrl = '@searchBaseUrl';

  window.searchspringTracking = {
    userId: null,
    sessionId: null
  };

  document.addEventListener('intellisuggest-ready', function () {
    const trackingParams = window.intellisuggest?.getTrackingParams?.();
    if (trackingParams?.userId && trackingParams?.sessionId) {
      window.searchspringTracking.userId = trackingParams.userId;
      window.searchspringTracking.sessionId = trackingParams.sessionId;
      console.log("✅ Searchspring tracking ready:", window.searchspringTracking);
    } else {
      console.warn("⚠️ Tracking params missing after intellisuggest-ready event.");
    }
  });

  // Helper to clear and hide suggestions
  function clearSuggestions() {
    resultsContainer.innerHTML = '';
    resultsContainer.style.display = 'none';
  }

  // Render suggestion items as list
  function renderSuggestions(items) {
    if (!items || !items.length) {
      clearSuggestions();
      return;
    }

    resultsContainer.innerHTML = '';
    items.forEach(item => {
      const li = document.createElement('li');
      li.textContent = item.value || item; // fallback if no .value property
      li.className = 'suggestion-item';
      li.tabIndex = 0; // make focusable for accessibility
      li.addEventListener('click', () => {
        input.value = li.textContent;
        clearSuggestions();
        input.focus();
      });
      li.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          li.click();
        }
      });
      resultsContainer.appendChild(li);
    });
    resultsContainer.style.display = 'block';
  }

  input.addEventListener('input', async () => {
    const query = input.value.trim();
    if (query.length < 2) {
      clearSuggestions();
      return;
    }

    const { userId, sessionId } = window.searchspringTracking;
    let suggestUrl = `/searchspring/suggest?q=${encodeURIComponent(query)}`;
    if (userId && sessionId) {
      suggestUrl += `&userId=${encodeURIComponent(userId)}&sessionId=${encodeURIComponent(sessionId)}`;
    }

    try {
      const res = await fetch(suggestUrl);
      if (!res.ok) throw new Error(`Status ${res.status}`);

      const data = await res.json();
      // Assuming data.results is an array of suggestions with `.value` properties
      renderSuggestions(data.results);

    } catch (err) {
      console.error("❌ Failed to fetch suggestions:", err);
      clearSuggestions();
    }
  });

  // Submit redirects to results page
  document.getElementById('searchForm').addEventListener('submit', e => {
    e.preventDefault();
    const query = input.value.trim();
    if (query) {
      window.location.href = baseUrl + encodeURIComponent(query);
    }
  });

  // Hide suggestions when clicking outside
  document.addEventListener('click', e => {
    if (!e.target.closest('.search-container')) {
      clearSuggestions();
    }
  });

  // Hide on Escape
  input.addEventListener('keydown', e => {
    if (e.key === 'Escape') {
      clearSuggestions();
      input.blur();
    }
  });
</script>

<style>
  .autocomplete-list {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    max-height: 250px;
    overflow-y: auto;
    background: white;
    border: 1px solid #ccc;
    border-top: none;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    z-index: 10000;
    margin: 0;
    padding: 0;
    list-style: none;
  }
  .suggestion-item {
    padding: 8px 12px;
    cursor: pointer;
  }
  .suggestion-item:hover,
  .suggestion-item:focus {
    background-color: #f0f0f0;
    outline: none;
  }
</style>
