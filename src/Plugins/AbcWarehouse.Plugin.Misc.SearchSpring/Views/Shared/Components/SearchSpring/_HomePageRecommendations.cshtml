@inject AbcWarehouse.Plugin.Misc.SearchSpring.Services.ISearchSpringService searchSpringService
@inject Nop.Services.Catalog.IProductService productService
@inject Nop.Web.Factories.IProductModelFactory productModelFactory
@inject Nop.Core.IWorkContext workContext
@inject Nop.Services.Logging.ILogger logger
@using AbcWarehouse.Plugin.Misc.SearchSpring.Models
@using Nop.Web.Models.Catalog
@using Nop.Core.Domain.Logging
@using Newtonsoft.Json

@{
    await logger.InsertLogAsync(LogLevel.Information, "[Homepage Recommendations] Starting recommendations fetch...");
    
    // Get customer info for personalization
    var customer = await workContext.GetCurrentCustomerAsync();
    var shopperId = customer?.Id.ToString();
    
    await logger.InsertLogAsync(LogLevel.Information, $"[Homepage Recommendations] Customer ID: {shopperId ?? "Anonymous"}");

    // You can customize these profile tags based on what you've configured in SearchSpring
    var recsRequest = new RecommendationsRequestModel
    {
        Tags = "home",  // Change these to match your SearchSpring profiles
        Shopper = shopperId,
        Limits = "12,8",  // 12 trending, 8 bestsellers
        SiteId = "4lt84w"
    };
    
    await logger.InsertLogAsync(LogLevel.Information, $"[Homepage Recommendations] Request Tags: {recsRequest.Tags}");

    RecommendationsResultModel recommendations = null;
    try
    {
        recommendations = await searchSpringService.GetRecommendationsAsync(recsRequest);
        
        if (recommendations == null)
        {
            await logger.InsertLogAsync(LogLevel.Warning, "[Homepage Recommendations] Service returned NULL");
        }
        else
        {
            var response = await httpClient.GetAsync(url);
            var json = await response.Content.ReadAsStringAsync();

            await logger.InsertLogAsync(LogLevel.Information, 
                $"[Homepage Recommendations] Raw API Response: {json}");

            var recommendations = JsonConvert.DeserializeObject<RecommendationsResponseModel>(json);

            
            foreach (var profile in recommendations.Profiles)
            {
                await logger.InsertLogAsync(LogLevel.Information, 
                    $"[Homepage Recommendations] Profile '{profile.Tag}': {profile.Results.Count} products");
            }
        }
    }
    catch (Exception ex)
    {
        await logger.InsertLogAsync(LogLevel.Error, 
            $"[Homepage Recommendations] ERROR: {ex.Message}\nStackTrace: {ex.StackTrace}");
        System.Diagnostics.Debug.WriteLine($"Homepage Recommendations error: {ex.Message}");
    }
}

@if (recommendations != null && recommendations.Profiles.Any())
{
    await logger.InsertLogAsync(LogLevel.Information, "[Homepage Recommendations] Rendering recommendations...");
    
    <div class="homepage-recommendations-section" style="margin: 60px 0;">
        @foreach (var profile in recommendations.Profiles)
        {
            if (profile.Results.Any())
            {
                <div class="recommendation-profile" style="margin-bottom: 60px;">
                    <h2 style="font-size: 32px; margin-bottom: 30px; padding-bottom: 15px; border-bottom: 3px solid #446588; text-align: center;">
                        @(profile.Display ?? "Recommended For You")
                    </h2>
                    
                    <div class="product-grid">
                        <div class="item-grid">
                            @{
                                var productModels = new List<ProductOverviewModel>();
                                var foundCount = 0;
                                var notFoundCount = 0;

                                // Limit to 12 products per profile for homepage
                                foreach (var item in profile.Results.Take(12))
                                {
                                    var product = await productService.GetProductBySkuAsync(item.Sku);
                                    if (product == null)
                                    {
                                        product = await productService.GetProductBySkuAsync("+" + item.Sku);
                                    }

                                    if (product != null)
                                    {
                                        foundCount++;
                                        var productOverviewModels = await productModelFactory.PrepareProductOverviewModelsAsync(
                                            new[] { product },
                                            true,
                                            true);

                                        var model = productOverviewModels.FirstOrDefault();
                                        if (model != null)
                                        {
                                            productModels.Add(model);
                                        }
                                    }
                                    else
                                    {
                                        notFoundCount++;
                                        await logger.InsertLogAsync(LogLevel.Warning, 
                                            $"[Homepage Recommendations] Product not found for SKU: {item.Sku}");
                                    }
                                }
                                
                                await logger.InsertLogAsync(LogLevel.Information, 
                                    $"[Homepage Recommendations] Profile '{profile.Tag}': Found {foundCount}, Not Found {notFoundCount}, Rendering {productModels.Count}");

                                foreach (var productModel in productModels)
                                {
                                    <div class="item-box">
                                        @await Html.PartialAsync("_ProductBox", productModel)
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    
    await logger.InsertLogAsync(LogLevel.Information, "[Homepage Recommendations] Rendering complete!");
}
else
{
    await logger.InsertLogAsync(LogLevel.Warning, "[Homepage Recommendations] No recommendations to display");
}